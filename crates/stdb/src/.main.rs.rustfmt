use std::vec;
use clap::Command;
use clap::ArgMatches;

mod signup;

fn main() {
    if let Ok(args) = main_app().try_get_matches() {
        match(args.subcommand()) {
            Ok(cmd, subcommand_args) => {
        let func = builtin_exec(cmd).unwrap();
        func(subcommand_args);
            }

            None => {
                panic!("No subcommand found!")
            }
        }

    } else {
        println!("Invalid subcommand!")
    }

    println!("Hello, world!");
}

fn main_app() -> Command<'static> {
    Command::new("stdb")
        .allow_external_subcommands(true)
        .subcommands(builtin())
        .override_usage("stdb [OPTIONS] [SUBCOMMAND]")
        .help_template("\
Client program for SpacetimeDB

Usage: {usage}

Options:
{options}

Some common SpacetimeDB commands are
    signup      Creates a new SpacetimeDB identity using your email
    login       Login using an existing identity
    init        Initializes a new project
    update      ???
    logs        Prints logs from a SpacetimeDB server
    energy      Invokes commands related to energy
    revert      Reverts the database to a given point in time
    query       Run a SQL query on the database
    call        Invokes a SpacetimeDB command
    address     ???
    metrics     Prints metrics")
}

fn builtin() -> Vec<Command<'static>> {
    vec![
        signup::cli(),
    ]
}

fn builtin_exec(cmd: &str) -> Option<fn(&ArgMatches)> {
    let f = match cmd {
        "signup" => signup::exec,
        _ => return None,
    };
    Some(f)
}
