/// Classification of WASM opcodes by operation type, along with our estimated cost of
/// these operations, in our own energy 'quanta' units.
use wasmer::wasmparser::Operator;
use wasmer::wasmparser::Operator::*;

/// Rough categorizations of types of operations, so that we can group things roughly by cost.
// TODO: These categorizations are likely going to need attention over time but reflected my
// broad understanding of the kinds of operations grouped in terms of their potential computation
// cost categorizations.
#[derive(Debug, Hash, PartialEq, Eq, PartialOrd, Ord, Copy, Clone)]
pub enum OperationType {
    Nop,

    // Integer scalar ops
    Bit,
    AtomicBit,
    AtomicXchg,
    IntegerComparison,
    AddSub,
    AtomicAddSub,
    Mul,
    Div,

    // Float scalar ops
    FloatComparison,
    FloatAdd,
    FloatMul,
    FloatDiv,
    FloatOperation, // abs/ceil/floor etc.

    // Variable / stack
    Load,
    Store,
    AtomicLoad,
    AtomicStore,
    Const,
    FloatConst,
    Local,
    Global,

    // Control flow and scope
    Branch,
    Scope,
    Unreachable,
    Call,

    // Type conversion
    Conversion,
    FloatConversion,
    Reinterpretation,

    // Memory management
    Memory,

    // I'm a snowflake!
    AtomicSynchronization,

    // Vector SIMD operations.
    Vector128Load,
    Vector128Store,
    Vector128Const,
    Vector128Bit,
    Vector128Integer,
    Vector128Float,
}

impl OperationType {
    /// Classify a Wasmer Operator by its operation type.
    pub fn operation_type_of(instruction: &Operator) -> Self {
        // TODO: keep an eye on this table.
        // TODO: this table is going to be not-fun to maintain over time, esp as more vector ops
        // are added, or wasmer versions change. There might be a more scalable approach.
        match instruction {
            Unreachable => OperationType::Unreachable,
            Nop => OperationType::Nop,
            Block { .. } => OperationType::Scope,
            Loop { .. } => OperationType::Scope,
            If { .. } => OperationType::Scope,
            Else => OperationType::Scope,
            End => OperationType::Scope,
            Br { .. } => OperationType::Branch,
            BrIf { .. } => OperationType::Branch,
            BrTable { .. } => OperationType::Branch,
            Return => OperationType::Branch,

            Drop => OperationType::Branch,
            Select => OperationType::Branch,
            Try { .. } => OperationType::Scope,
            Catch { .. } => OperationType::Scope,
            Throw { .. } => OperationType::Branch,
            Rethrow { .. } => OperationType::Branch,
            ReturnCall { .. } => OperationType::Branch,
            ReturnCallIndirect { .. } => OperationType::Branch,
            Delegate { .. } => OperationType::Branch,
            CatchAll => OperationType::Scope,
            TypedSelect { .. } => OperationType::Branch,

            Call { .. } => OperationType::Call,
            CallIndirect { .. } => OperationType::Call,

            MemorySize { .. } => OperationType::Memory,
            MemoryGrow { .. } => OperationType::Memory,

            // TODO: not clear on these, I'll treat them as Local for now
            RefNull { .. } => OperationType::Local,
            RefIsNull => OperationType::Local,
            RefFunc { .. } => OperationType::Local,

            LocalGet { .. } => OperationType::Local,
            LocalSet { .. } => OperationType::Local,
            LocalTee { .. } => OperationType::Local,

            GlobalGet { .. } => OperationType::Global,
            GlobalSet { .. } => OperationType::Global,

            I32Load { .. } => OperationType::Load,
            I64Load { .. } => OperationType::Load,
            F32Load { .. } => OperationType::Load,
            F64Load { .. } => OperationType::Load,
            I32Load8S { .. } => OperationType::Load,
            I32Load8U { .. } => OperationType::Load,
            I32Load16S { .. } => OperationType::Load,
            I32Load16U { .. } => OperationType::Load,
            I64Load8S { .. } => OperationType::Load,
            I64Load8U { .. } => OperationType::Load,
            I64Load16S { .. } => OperationType::Load,
            I64Load16U { .. } => OperationType::Load,
            I64Load32S { .. } => OperationType::Load,
            I64Load32U { .. } => OperationType::Load,
            I32AtomicLoad { .. } => OperationType::AtomicLoad,
            I64AtomicLoad { .. } => OperationType::AtomicLoad,
            I32AtomicLoad8U { .. } => OperationType::AtomicLoad,
            I32AtomicLoad16U { .. } => OperationType::AtomicLoad,
            I64AtomicLoad8U { .. } => OperationType::AtomicLoad,
            I64AtomicLoad16U { .. } => OperationType::AtomicLoad,
            I64AtomicLoad32U { .. } => OperationType::AtomicLoad,

            // Look at me, I'm a snowflake.
            AtomicFence { .. } => OperationType::AtomicSynchronization,

            I32Store { .. } => OperationType::Store,
            I64Store { .. } => OperationType::Store,
            F32Store { .. } => OperationType::Store,
            F64Store { .. } => OperationType::Store,
            I32Store8 { .. } => OperationType::Store,
            I32Store16 { .. } => OperationType::Store,
            I64Store8 { .. } => OperationType::Store,
            I64Store16 { .. } => OperationType::Store,
            I64Store32 { .. } => OperationType::Store,
            I32AtomicStore { .. } => OperationType::AtomicStore,
            I64AtomicStore { .. } => OperationType::AtomicStore,
            I32AtomicStore8 { .. } => OperationType::AtomicStore,
            I32AtomicStore16 { .. } => OperationType::AtomicStore,
            I64AtomicStore8 { .. } => OperationType::AtomicStore,
            I64AtomicStore16 { .. } => OperationType::AtomicStore,
            I64AtomicStore32 { .. } => OperationType::AtomicStore,

            I32Const { .. } => OperationType::Const,
            I64Const { .. } => OperationType::Const,

            F32Const { .. } => OperationType::FloatConst,
            F64Const { .. } => OperationType::FloatConst,

            I32Eqz => OperationType::IntegerComparison,
            I32Eq => OperationType::IntegerComparison,
            I32Ne => OperationType::IntegerComparison,
            I32LtS => OperationType::IntegerComparison,
            I32LtU => OperationType::IntegerComparison,
            I32GtS => OperationType::IntegerComparison,
            I32GtU => OperationType::IntegerComparison,
            I32LeS => OperationType::IntegerComparison,
            I32LeU => OperationType::IntegerComparison,
            I32GeS => OperationType::IntegerComparison,
            I32GeU => OperationType::IntegerComparison,

            I64Eqz => OperationType::IntegerComparison,
            I64Eq => OperationType::IntegerComparison,
            I64Ne => OperationType::IntegerComparison,
            I64LtS => OperationType::IntegerComparison,
            I64LtU => OperationType::IntegerComparison,
            I64GtS => OperationType::IntegerComparison,
            I64GtU => OperationType::IntegerComparison,
            I64LeS => OperationType::IntegerComparison,
            I64LeU => OperationType::IntegerComparison,
            I64GeS => OperationType::IntegerComparison,
            I64GeU => OperationType::IntegerComparison,

            F32Eq => OperationType::FloatComparison,
            F32Ne => OperationType::FloatComparison,
            F32Lt => OperationType::FloatComparison,
            F32Gt => OperationType::FloatComparison,
            F32Le => OperationType::FloatComparison,
            F32Ge => OperationType::FloatComparison,

            F64Eq => OperationType::FloatComparison,
            F64Ne => OperationType::FloatComparison,
            F64Lt => OperationType::FloatComparison,
            F64Gt => OperationType::FloatComparison,
            F64Le => OperationType::FloatComparison,
            F64Ge => OperationType::FloatComparison,

            I32Clz => OperationType::Bit,
            I32Ctz => OperationType::Bit,
            I32Popcnt => OperationType::Bit,

            I32Add => OperationType::AddSub,
            I32Sub => OperationType::AddSub,

            I32AtomicRmwAdd { .. } => OperationType::AtomicAddSub,
            I64AtomicRmwAdd { .. } => OperationType::AtomicAddSub,
            I32AtomicRmw8AddU { .. } => OperationType::AtomicAddSub,
            I32AtomicRmw16AddU { .. } => OperationType::AtomicAddSub,
            I64AtomicRmw8AddU { .. } => OperationType::AtomicAddSub,
            I64AtomicRmw16AddU { .. } => OperationType::AtomicAddSub,
            I64AtomicRmw32AddU { .. } => OperationType::AtomicAddSub,
            I32AtomicRmwSub { .. } => OperationType::AtomicAddSub,
            I64AtomicRmwSub { .. } => OperationType::AtomicAddSub,
            I32AtomicRmw8SubU { .. } => OperationType::AtomicAddSub,
            I32AtomicRmw16SubU { .. } => OperationType::AtomicAddSub,
            I64AtomicRmw8SubU { .. } => OperationType::AtomicAddSub,
            I64AtomicRmw16SubU { .. } => OperationType::AtomicAddSub,
            I64AtomicRmw32SubU { .. } => OperationType::AtomicAddSub,

            I32AtomicRmwAnd { .. } => OperationType::AtomicBit,
            I64AtomicRmwAnd { .. } => OperationType::AtomicBit,
            I32AtomicRmw8AndU { .. } => OperationType::AtomicBit,
            I32AtomicRmw16AndU { .. } => OperationType::AtomicBit,
            I64AtomicRmw8AndU { .. } => OperationType::AtomicBit,
            I64AtomicRmw16AndU { .. } => OperationType::AtomicBit,
            I64AtomicRmw32AndU { .. } => OperationType::AtomicBit,
            I32AtomicRmwOr { .. } => OperationType::AtomicBit,
            I64AtomicRmwOr { .. } => OperationType::AtomicBit,
            I32AtomicRmw8OrU { .. } => OperationType::AtomicBit,
            I32AtomicRmw16OrU { .. } => OperationType::AtomicBit,
            I64AtomicRmw8OrU { .. } => OperationType::AtomicBit,
            I64AtomicRmw16OrU { .. } => OperationType::AtomicBit,
            I64AtomicRmw32OrU { .. } => OperationType::AtomicBit,
            I32AtomicRmwXor { .. } => OperationType::AtomicBit,
            I64AtomicRmwXor { .. } => OperationType::AtomicBit,
            I32AtomicRmw8XorU { .. } => OperationType::AtomicBit,
            I32AtomicRmw16XorU { .. } => OperationType::AtomicBit,
            I64AtomicRmw8XorU { .. } => OperationType::AtomicBit,
            I64AtomicRmw16XorU { .. } => OperationType::AtomicBit,
            I64AtomicRmw32XorU { .. } => OperationType::AtomicBit,

            I32AtomicRmwXchg { .. } => OperationType::AtomicXchg,
            I64AtomicRmwXchg { .. } => OperationType::AtomicXchg,
            I32AtomicRmw8XchgU { .. } => OperationType::AtomicXchg,
            I32AtomicRmw16XchgU { .. } => OperationType::AtomicXchg,
            I64AtomicRmw8XchgU { .. } => OperationType::AtomicXchg,
            I64AtomicRmw16XchgU { .. } => OperationType::AtomicXchg,
            I64AtomicRmw32XchgU { .. } => OperationType::AtomicXchg,
            I32AtomicRmwCmpxchg { .. } => OperationType::AtomicXchg,
            I64AtomicRmwCmpxchg { .. } => OperationType::AtomicXchg,
            I32AtomicRmw8CmpxchgU { .. } => OperationType::AtomicXchg,
            I32AtomicRmw16CmpxchgU { .. } => OperationType::AtomicXchg,
            I64AtomicRmw8CmpxchgU { .. } => OperationType::AtomicXchg,
            I64AtomicRmw16CmpxchgU { .. } => OperationType::AtomicXchg,
            I64AtomicRmw32CmpxchgU { .. } => OperationType::AtomicXchg,

            I32Mul => OperationType::Mul,
            I32DivS => OperationType::Div,
            I32DivU => OperationType::Div,
            I32RemS => OperationType::Div,
            I32RemU => OperationType::Div,
            I32And => OperationType::Bit,
            I32Or => OperationType::Bit,
            I32Xor => OperationType::Bit,
            I32Shl => OperationType::Bit,
            I32ShrS => OperationType::Bit,
            I32ShrU => OperationType::Bit,
            I32Rotl => OperationType::Bit,
            I32Rotr => OperationType::Bit,

            I64Clz => OperationType::Bit,
            I64Ctz => OperationType::Bit,
            I64Popcnt => OperationType::Bit,
            I64Add => OperationType::AddSub,
            I64Sub => OperationType::AddSub,
            I64Mul => OperationType::Mul,
            I64DivS => OperationType::Div,
            I64DivU => OperationType::Div,
            I64RemS => OperationType::Div,
            I64RemU => OperationType::Div,
            I64And => OperationType::Bit,
            I64Or => OperationType::Bit,
            I64Xor => OperationType::Bit,
            I64Shl => OperationType::Bit,
            I64ShrS => OperationType::Bit,
            I64ShrU => OperationType::Bit,
            I64Rotl => OperationType::Bit,
            I64Rotr => OperationType::Bit,

            F32Abs => OperationType::FloatOperation,
            F32Neg => OperationType::FloatOperation,
            F32Ceil => OperationType::FloatOperation,
            F32Floor => OperationType::FloatOperation,
            F32Trunc => OperationType::FloatOperation,
            F32Nearest => OperationType::FloatOperation,
            F32Sqrt => OperationType::FloatOperation,
            F32Add => OperationType::FloatAdd,
            F32Sub => OperationType::FloatAdd,
            F32Mul => OperationType::FloatMul,
            F32Div => OperationType::FloatDiv,
            F32Min => OperationType::FloatComparison,
            F32Max => OperationType::FloatComparison,
            F32Copysign => OperationType::FloatComparison,
            F64Abs => OperationType::FloatOperation,
            F64Neg => OperationType::FloatComparison,
            F64Ceil => OperationType::FloatOperation,
            F64Floor => OperationType::FloatOperation,
            F64Trunc => OperationType::FloatOperation,
            F64Nearest => OperationType::FloatOperation,
            F64Sqrt => OperationType::FloatOperation,
            F64Add => OperationType::FloatAdd,
            F64Sub => OperationType::FloatAdd,
            F64Mul => OperationType::FloatMul,
            F64Div => OperationType::FloatDiv,
            F64Min => OperationType::FloatComparison,
            F64Max => OperationType::FloatComparison,
            F64Copysign => OperationType::FloatComparison,

            I32WrapI64 => OperationType::Conversion,
            I64ExtendI32S => OperationType::Conversion,
            I64ExtendI32U => OperationType::Conversion,
            I32Extend8S => OperationType::Conversion,
            I32Extend16S => OperationType::Conversion,
            I64Extend8S => OperationType::Conversion,
            I64Extend16S => OperationType::Conversion,
            I64Extend32S => OperationType::Conversion,

            I32TruncF32S => OperationType::FloatConversion,
            I32TruncF32U => OperationType::FloatConversion,
            I32TruncF64S => OperationType::FloatConversion,
            I32TruncF64U => OperationType::FloatConversion,
            I64TruncF32S => OperationType::FloatConversion,
            I64TruncF32U => OperationType::FloatConversion,
            I64TruncF64S => OperationType::FloatConversion,
            I64TruncF64U => OperationType::FloatConversion,
            I32TruncSatF32S => OperationType::FloatConversion,
            I32TruncSatF32U => OperationType::FloatConversion,
            I32TruncSatF64S => OperationType::FloatConversion,
            I32TruncSatF64U => OperationType::FloatConversion,
            I64TruncSatF32S => OperationType::FloatConversion,
            I64TruncSatF32U => OperationType::FloatConversion,
            I64TruncSatF64S => OperationType::FloatConversion,
            I64TruncSatF64U => OperationType::FloatConversion,

            F32ConvertI32S => OperationType::FloatConversion,
            F32ConvertI32U => OperationType::FloatConversion,
            F32ConvertI64S => OperationType::FloatConversion,
            F32ConvertI64U => OperationType::FloatConversion,
            F32DemoteF64 => OperationType::FloatConversion,
            F64ConvertI32S => OperationType::FloatConversion,
            F64ConvertI32U => OperationType::FloatConversion,
            F64ConvertI64S => OperationType::FloatConversion,
            F64ConvertI64U => OperationType::FloatConversion,
            F64PromoteF32 => OperationType::FloatConversion,

            I32ReinterpretF32 => OperationType::Reinterpretation,
            I64ReinterpretF64 => OperationType::Reinterpretation,
            F32ReinterpretI32 => OperationType::Reinterpretation,
            F64ReinterpretI64 => OperationType::Reinterpretation,

            MemoryInit { .. } => OperationType::Memory,
            DataDrop { .. } => OperationType::Memory,
            MemoryCopy { .. } => OperationType::Memory,
            MemoryFill { .. } => OperationType::Memory,
            TableInit { .. } => OperationType::Memory,
            ElemDrop { .. } => OperationType::Memory,
            TableCopy { .. } => OperationType::Memory,
            TableFill { .. } => OperationType::Memory,
            TableGet { .. } => OperationType::Memory,
            TableSet { .. } => OperationType::Memory,
            TableGrow { .. } => OperationType::Memory,
            TableSize { .. } => OperationType::Memory,

            MemoryAtomicNotify { .. } => OperationType::Memory,
            MemoryAtomicWait32 { .. } => OperationType::Memory,
            MemoryAtomicWait64 { .. } => OperationType::Memory,

            V128Load { .. } => OperationType::Vector128Load,
            V128Load8x8S { .. } => OperationType::Vector128Load,
            V128Load8x8U { .. } => OperationType::Vector128Load,
            V128Load16x4S { .. } => OperationType::Vector128Load,
            V128Load16x4U { .. } => OperationType::Vector128Load,
            V128Load32x2S { .. } => OperationType::Vector128Load,
            V128Load32x2U { .. } => OperationType::Vector128Load,
            V128Load8Splat { .. } => OperationType::Vector128Load,
            V128Load16Splat { .. } => OperationType::Vector128Load,
            V128Load32Splat { .. } => OperationType::Vector128Load,
            V128Load64Splat { .. } => OperationType::Vector128Load,
            V128Load32Zero { .. } => OperationType::Vector128Load,
            V128Load64Zero { .. } => OperationType::Vector128Load,
            V128Load8Lane { .. } => OperationType::Vector128Load,
            V128Load16Lane { .. } => OperationType::Vector128Load,
            V128Load32Lane { .. } => OperationType::Vector128Load,
            V128Load64Lane { .. } => OperationType::Vector128Load,

            V128Store { .. } => OperationType::Vector128Store,
            V128Store8Lane { .. } => OperationType::Vector128Store,
            V128Store16Lane { .. } => OperationType::Vector128Store,
            V128Store32Lane { .. } => OperationType::Vector128Store,
            V128Store64Lane { .. } => OperationType::Vector128Store,
            V128Const { .. } => OperationType::Vector128Const,

            V128Not => OperationType::Vector128Bit,
            V128And => OperationType::Vector128Bit,
            V128AndNot => OperationType::Vector128Bit,
            V128Or => OperationType::Vector128Bit,
            V128Xor => OperationType::Vector128Bit,
            V128Bitselect => OperationType::Vector128Bit,
            V128AnyTrue => OperationType::Vector128Bit,

            I8x16Shuffle { .. } => OperationType::Vector128Integer,
            I8x16ExtractLaneS { .. } => OperationType::Vector128Integer,
            I8x16ExtractLaneU { .. } => OperationType::Vector128Integer,
            I8x16ReplaceLane { .. } => OperationType::Vector128Integer,
            I16x8ExtractLaneS { .. } => OperationType::Vector128Integer,
            I16x8ExtractLaneU { .. } => OperationType::Vector128Integer,
            I16x8ReplaceLane { .. } => OperationType::Vector128Integer,
            I32x4ExtractLane { .. } => OperationType::Vector128Integer,
            I32x4ReplaceLane { .. } => OperationType::Vector128Integer,
            I64x2ExtractLane { .. } => OperationType::Vector128Integer,
            I64x2ReplaceLane { .. } => OperationType::Vector128Integer,
            F32x4ExtractLane { .. } => OperationType::Vector128Integer,
            F32x4ReplaceLane { .. } => OperationType::Vector128Integer,
            F64x2ExtractLane { .. } => OperationType::Vector128Integer,
            F64x2ReplaceLane { .. } => OperationType::Vector128Integer,
            I8x16Swizzle => OperationType::Vector128Integer,
            I8x16Splat => OperationType::Vector128Integer,
            I16x8Splat => OperationType::Vector128Integer,
            I32x4Splat => OperationType::Vector128Integer,
            I64x2Splat => OperationType::Vector128Integer,
            F32x4Splat => OperationType::Vector128Integer,
            F64x2Splat => OperationType::Vector128Integer,
            I8x16Eq => OperationType::Vector128Integer,
            I8x16Ne => OperationType::Vector128Integer,
            I8x16LtS => OperationType::Vector128Integer,
            I8x16LtU => OperationType::Vector128Integer,
            I8x16GtS => OperationType::Vector128Integer,
            I8x16GtU => OperationType::Vector128Integer,
            I8x16LeS => OperationType::Vector128Integer,
            I8x16LeU => OperationType::Vector128Integer,
            I8x16GeS => OperationType::Vector128Integer,
            I8x16GeU => OperationType::Vector128Integer,
            I16x8Eq => OperationType::Vector128Integer,
            I16x8Ne => OperationType::Vector128Integer,
            I16x8LtS => OperationType::Vector128Integer,
            I16x8LtU => OperationType::Vector128Integer,
            I16x8GtS => OperationType::Vector128Integer,
            I16x8GtU => OperationType::Vector128Integer,
            I16x8LeS => OperationType::Vector128Integer,
            I16x8LeU => OperationType::Vector128Integer,
            I16x8GeS => OperationType::Vector128Integer,
            I16x8GeU => OperationType::Vector128Integer,
            I32x4Eq => OperationType::Vector128Integer,
            I32x4Ne => OperationType::Vector128Integer,
            I32x4LtS => OperationType::Vector128Integer,
            I32x4LtU => OperationType::Vector128Integer,
            I32x4GtS => OperationType::Vector128Integer,
            I32x4GtU => OperationType::Vector128Integer,
            I32x4LeS => OperationType::Vector128Integer,
            I32x4LeU => OperationType::Vector128Integer,
            I32x4GeS => OperationType::Vector128Integer,
            I32x4GeU => OperationType::Vector128Integer,
            I64x2Eq => OperationType::Vector128Integer,
            I64x2Ne => OperationType::Vector128Integer,
            I64x2LtS => OperationType::Vector128Integer,
            I64x2GtS => OperationType::Vector128Integer,
            I64x2LeS => OperationType::Vector128Integer,
            I64x2GeS => OperationType::Vector128Integer,
            I8x16Abs => OperationType::Vector128Integer,
            I8x16Neg => OperationType::Vector128Integer,
            I8x16Popcnt => OperationType::Vector128Integer,
            I8x16AllTrue => OperationType::Vector128Integer,
            I8x16Bitmask => OperationType::Vector128Integer,
            I8x16NarrowI16x8S => OperationType::Vector128Integer,
            I8x16NarrowI16x8U => OperationType::Vector128Integer,
            I8x16Shl => OperationType::Vector128Integer,
            I8x16ShrS => OperationType::Vector128Integer,
            I8x16ShrU => OperationType::Vector128Integer,
            I8x16Add => OperationType::Vector128Integer,
            I8x16AddSatS => OperationType::Vector128Integer,
            I8x16AddSatU => OperationType::Vector128Integer,
            I8x16Sub => OperationType::Vector128Integer,
            I8x16SubSatS => OperationType::Vector128Integer,
            I8x16SubSatU => OperationType::Vector128Integer,
            I8x16MinS => OperationType::Vector128Integer,
            I8x16MinU => OperationType::Vector128Integer,
            I8x16MaxS => OperationType::Vector128Integer,
            I8x16MaxU => OperationType::Vector128Integer,
            I8x16RoundingAverageU => OperationType::Vector128Integer,
            I16x8ExtAddPairwiseI8x16S => OperationType::Vector128Integer,
            I16x8ExtAddPairwiseI8x16U => OperationType::Vector128Integer,
            I16x8Abs => OperationType::Vector128Integer,
            I16x8Neg => OperationType::Vector128Integer,
            I16x8Q15MulrSatS => OperationType::Vector128Integer,
            I16x8AllTrue => OperationType::Vector128Integer,
            I16x8Bitmask => OperationType::Vector128Integer,
            I16x8NarrowI32x4S => OperationType::Vector128Integer,
            I16x8NarrowI32x4U => OperationType::Vector128Integer,
            I16x8ExtendLowI8x16S => OperationType::Vector128Integer,
            I16x8ExtendHighI8x16S => OperationType::Vector128Integer,
            I16x8ExtendLowI8x16U => OperationType::Vector128Integer,
            I16x8ExtendHighI8x16U => OperationType::Vector128Integer,
            I16x8Shl => OperationType::Vector128Integer,
            I16x8ShrS => OperationType::Vector128Integer,
            I16x8ShrU => OperationType::Vector128Integer,
            I16x8Add => OperationType::Vector128Integer,
            I16x8AddSatS => OperationType::Vector128Integer,
            I16x8AddSatU => OperationType::Vector128Integer,
            I16x8Sub => OperationType::Vector128Integer,
            I16x8SubSatS => OperationType::Vector128Integer,
            I16x8SubSatU => OperationType::Vector128Integer,
            I16x8Mul => OperationType::Vector128Integer,
            I16x8MinS => OperationType::Vector128Integer,
            I16x8MinU => OperationType::Vector128Integer,
            I16x8MaxS => OperationType::Vector128Integer,
            I16x8MaxU => OperationType::Vector128Integer,
            I16x8RoundingAverageU => OperationType::Vector128Integer,
            I16x8ExtMulLowI8x16S => OperationType::Vector128Integer,
            I16x8ExtMulHighI8x16S => OperationType::Vector128Integer,
            I16x8ExtMulLowI8x16U => OperationType::Vector128Integer,
            I16x8ExtMulHighI8x16U => OperationType::Vector128Integer,
            I32x4ExtAddPairwiseI16x8S => OperationType::Vector128Integer,
            I32x4ExtAddPairwiseI16x8U => OperationType::Vector128Integer,
            I32x4Abs => OperationType::Vector128Integer,
            I32x4Neg => OperationType::Vector128Integer,
            I32x4AllTrue => OperationType::Vector128Integer,
            I32x4Bitmask => OperationType::Vector128Integer,
            I32x4ExtendLowI16x8S => OperationType::Vector128Integer,
            I32x4ExtendHighI16x8S => OperationType::Vector128Integer,
            I32x4ExtendLowI16x8U => OperationType::Vector128Integer,
            I32x4ExtendHighI16x8U => OperationType::Vector128Integer,
            I32x4Shl => OperationType::Vector128Integer,
            I32x4ShrS => OperationType::Vector128Integer,
            I32x4ShrU => OperationType::Vector128Integer,
            I32x4Add => OperationType::Vector128Integer,
            I32x4Sub => OperationType::Vector128Integer,
            I32x4Mul => OperationType::Vector128Integer,
            I32x4MinS => OperationType::Vector128Integer,
            I32x4MinU => OperationType::Vector128Integer,
            I32x4MaxS => OperationType::Vector128Integer,
            I32x4MaxU => OperationType::Vector128Integer,
            I32x4DotI16x8S => OperationType::Vector128Integer,
            I32x4ExtMulLowI16x8S => OperationType::Vector128Integer,
            I32x4ExtMulHighI16x8S => OperationType::Vector128Integer,
            I32x4ExtMulLowI16x8U => OperationType::Vector128Integer,
            I32x4ExtMulHighI16x8U => OperationType::Vector128Integer,
            I64x2Abs => OperationType::Vector128Integer,
            I64x2Neg => OperationType::Vector128Integer,
            I64x2AllTrue => OperationType::Vector128Integer,
            I64x2Bitmask => OperationType::Vector128Integer,
            I64x2ExtendLowI32x4S => OperationType::Vector128Integer,
            I64x2ExtendHighI32x4S => OperationType::Vector128Integer,
            I64x2ExtendLowI32x4U => OperationType::Vector128Integer,
            I64x2ExtendHighI32x4U => OperationType::Vector128Integer,
            I64x2Shl => OperationType::Vector128Integer,
            I64x2ShrS => OperationType::Vector128Integer,
            I64x2ShrU => OperationType::Vector128Integer,
            I64x2Add => OperationType::Vector128Integer,
            I64x2Sub => OperationType::Vector128Integer,
            I64x2Mul => OperationType::Vector128Integer,
            I64x2ExtMulLowI32x4S => OperationType::Vector128Integer,
            I64x2ExtMulHighI32x4S => OperationType::Vector128Integer,
            I64x2ExtMulLowI32x4U => OperationType::Vector128Integer,
            I64x2ExtMulHighI32x4U => OperationType::Vector128Integer,
            I8x16LaneSelect => OperationType::Vector128Integer,
            I16x8LaneSelect => OperationType::Vector128Integer,
            I32x4LaneSelect => OperationType::Vector128Integer,
            I64x2LaneSelect => OperationType::Vector128Integer,

            F32x4Eq => OperationType::Vector128Float,
            F32x4Ne => OperationType::Vector128Float,
            F32x4Lt => OperationType::Vector128Float,
            F32x4Gt => OperationType::Vector128Float,
            F32x4Le => OperationType::Vector128Float,
            F32x4Ge => OperationType::Vector128Float,
            F64x2Eq => OperationType::Vector128Float,
            F64x2Ne => OperationType::Vector128Float,
            F64x2Lt => OperationType::Vector128Float,
            F64x2Gt => OperationType::Vector128Float,
            F64x2Le => OperationType::Vector128Float,
            F64x2Ge => OperationType::Vector128Float,
            F32x4Ceil => OperationType::Vector128Float,
            F32x4Floor => OperationType::Vector128Float,
            F32x4Trunc => OperationType::Vector128Float,
            F32x4Nearest => OperationType::Vector128Float,
            F32x4Abs => OperationType::Vector128Float,
            F32x4Neg => OperationType::Vector128Float,
            F32x4Sqrt => OperationType::Vector128Float,
            F32x4Add => OperationType::Vector128Float,
            F32x4Sub => OperationType::Vector128Float,
            F32x4Mul => OperationType::Vector128Float,
            F32x4Div => OperationType::Vector128Float,
            F32x4Min => OperationType::Vector128Float,
            F32x4Max => OperationType::Vector128Float,
            F32x4PMin => OperationType::Vector128Float,
            F32x4PMax => OperationType::Vector128Float,
            F64x2Ceil => OperationType::Vector128Float,
            F64x2Floor => OperationType::Vector128Float,
            F64x2Trunc => OperationType::Vector128Float,
            F64x2Nearest => OperationType::Vector128Float,
            F64x2Abs => OperationType::Vector128Float,
            F64x2Neg => OperationType::Vector128Float,
            F64x2Sqrt => OperationType::Vector128Float,
            F64x2Add => OperationType::Vector128Float,
            F64x2Sub => OperationType::Vector128Float,
            F64x2Mul => OperationType::Vector128Float,
            F64x2Div => OperationType::Vector128Float,
            F64x2Min => OperationType::Vector128Float,
            F64x2Max => OperationType::Vector128Float,
            F64x2PMin => OperationType::Vector128Float,
            F64x2PMax => OperationType::Vector128Float,
            I32x4TruncSatF32x4S => OperationType::Vector128Float,
            I32x4TruncSatF32x4U => OperationType::Vector128Float,
            F32x4ConvertI32x4S => OperationType::Vector128Float,
            F32x4ConvertI32x4U => OperationType::Vector128Float,
            I32x4TruncSatF64x2SZero => OperationType::Vector128Float,
            I32x4TruncSatF64x2UZero => OperationType::Vector128Float,
            F64x2ConvertLowI32x4S => OperationType::Vector128Float,
            F64x2ConvertLowI32x4U => OperationType::Vector128Float,
            F32x4DemoteF64x2Zero => OperationType::Vector128Float,
            F64x2PromoteLowF32x4 => OperationType::Vector128Float,
            I8x16RelaxedSwizzle => OperationType::Vector128Float,
            I32x4RelaxedTruncSatF32x4S => OperationType::Vector128Float,
            I32x4RelaxedTruncSatF32x4U => OperationType::Vector128Float,
            I32x4RelaxedTruncSatF64x2SZero => OperationType::Vector128Float,
            I32x4RelaxedTruncSatF64x2UZero => OperationType::Vector128Float,
            F32x4Fma => OperationType::Vector128Float,
            F32x4Fms => OperationType::Vector128Float,
            F64x2Fma => OperationType::Vector128Float,
            F64x2Fms => OperationType::Vector128Float,
            F32x4RelaxedMin => OperationType::Vector128Float,
            F32x4RelaxedMax => OperationType::Vector128Float,
            F64x2RelaxedMin => OperationType::Vector128Float,
            F64x2RelaxedMax => OperationType::Vector128Float,
        }
    }

    /// Attempt to quantify the potential runtime/hardware cost of the operation.
    // TODO: These will need attention over time.
    pub fn energy_cost(&self) -> u64 {
        match self {
            // Note I am assuming scalar operations (for integers and floats) have the same
            // cost for 32-bits vs 64-bits, because I am assuming 64-bit hardware.
            OperationType::Bit => 1000,
            OperationType::AddSub => 1000,
            OperationType::Mul => 5000,

            // Treat division as roughly twice as expensive as multiplication, mainly because
            // division is more expensive on modern hardware because it can't be parallelized
            // as efficiently.
            OperationType::Div => 10000,
            OperationType::Load => 3000,
            OperationType::Store => 3000,
            OperationType::Const => 100,

            OperationType::FloatConst => 250,
            OperationType::FloatAdd => 1000,
            OperationType::FloatMul => 5000,
            OperationType::FloatDiv => 10000,
            OperationType::FloatOperation => 3000,
            OperationType::Local => 1500, // Register vs memory lookup, potentially.
            OperationType::Global => 3000,
            OperationType::IntegerComparison => 1000,
            OperationType::FloatComparison => 2000,
            OperationType::Conversion => 3000,
            OperationType::FloatConversion => 3000,
            OperationType::Reinterpretation => 000,
            OperationType::Unreachable => 000,
            OperationType::Nop => 100,

            OperationType::Scope => 500,
            OperationType::Branch => 1000,
            OperationType::Call => 4000,

            OperationType::Memory => 3000,

            OperationType::AtomicBit => 1000,
            OperationType::AtomicXchg => 1000,
            OperationType::AtomicAddSub => 1000,
            OperationType::AtomicLoad => 1000,
            OperationType::AtomicStore => 1000,
            OperationType::AtomicSynchronization => 1000,

            // I am treating all vector operations as the same cost for now, but this will likely
            // need tweaking over time. We may also need more granular classification of the
            // operations but I'm broadly assuming that if there is SIMD hardware available, it
            // will generally be fast.
            // TODO: If we don't have SIMD hardware, we could maybe detect that and make these
            // somewhat more expensive?
            OperationType::Vector128Load => 10000,
            OperationType::Vector128Store => 10000,
            OperationType::Vector128Const => 10000,
            OperationType::Vector128Bit => 10000,
            OperationType::Vector128Integer => 10000,
            OperationType::Vector128Float => 10000,
        }
    }
}
