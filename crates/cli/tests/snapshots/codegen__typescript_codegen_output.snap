---
source: crates/cli/tests/codegen.rs
expression: outfiles
---
"namespace_test_c.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

import { AlgebraicType, SumTypeVariant, BuiltinType, AlgebraicValue } from "@clockworklabs/spacetimedb-typescript-sdk";

export namespace Namespace.testC {
	export function getAlgebraicType(): AlgebraicType {
		return AlgebraicType.createSumType([
			new SumTypeVariant("Foo", AlgebraicType.createProductType([
		])),
			new SumTypeVariant("Bar", AlgebraicType.createProductType([
		])),
		]);
	}

	export function serialize(value: Namespace.testC): object {
		const result: {[key: string]: any} = {};
		result[value.tag] = [];
		return result;
	}

	export type Foo = { tag: "Foo"; value: undefined };
	export type Bar = { tag: "Bar"; value: undefined };

	export function fromValue(value: AlgebraicValue): Namespace.testC {
		let sumValue = value.asSumValue();
		let tag = sumValue.tag;
		let variant = Namespace.testC.getAlgebraicType().sum.variants[tag];
		return { tag: variant.name, value: undefined } as Namespace.testC;
	}
}

export type Namespace.testC = Namespace.testC.Foo | Namespace.testC.Bar;
'''
"repeating_test_reducer.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

import { AlgebraicType, ProductType, BuiltinType, ProductTypeElement, IDatabaseTable, AlgebraicValue } from "@clockworklabs/spacetimedb-typescript-sdk";

export class RepeatingTestReducer
{
	public static call(prevTime: number)
	{
		if (window.__SPACETIMEDB__.spacetimeDBClient) {
			window.__SPACETIMEDB__.spacetimeDBClient.call("repeating_test", [prev_time]);
		}
	}

	public static deserializeArgs(rawArgs: any[]): any[] {
		let prevTimeType = AlgebraicType.createPrimitiveType(BuiltinType.Type.U64);
		let prevTimeValue = AlgebraicValue.deserialize(prevTimeType, rawArgs[0])
		let prevTime = prevTimeValue.asNumber();
		return [prevTime];
	}

	public static on(callback: (status: string, identity: string, reducerArgs: any[]) => void)
	{
		if (window.__SPACETIMEDB__.spacetimeDBClient) {
			window.__SPACETIMEDB__.spacetimeDBClient.onEvent("reducer:RepeatingTest", callback);
		}
	}
}

window.__SPACETIMEDB__.reducers.set("RepeatingTest", RepeatingTestReducer);
if (window.__SPACETIMEDB__.spacetimeDBClient) {
	window.__SPACETIMEDB__.spacetimeDBClient.registerReducer("RepeatingTest", RepeatingTestReducer);
}
'''
"test_a.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

import { AlgebraicType, ProductType, BuiltinType, ProductTypeElement, SumType, SumTypeVariant, IDatabaseTable, AlgebraicValue } from "@clockworklabs/spacetimedb-typescript-sdk";

export class TestA extends IDatabaseTable
{
	public static tableName = "TestA";
	public x: number;
	public y: number;
	public z: string;

	constructor(x: number, y: number, z: string) {
	super();
		this.x = x;
		this.y = y;
		this.z = z;
	}

	public static serialize(value: TestA): object {
		return [
		value.x, value.y, value.z
		];
	}

	public static getAlgebraicType(): AlgebraicType
	{
		return AlgebraicType.createProductType([
			new ProductTypeElement("x", AlgebraicType.createPrimitiveType(BuiltinType.Type.U32)),
			new ProductTypeElement("y", AlgebraicType.createPrimitiveType(BuiltinType.Type.U32)),
			new ProductTypeElement("z", AlgebraicType.createPrimitiveType(BuiltinType.Type.String)),
		]);
	}

	public static fromValue(value: AlgebraicValue): TestA
	{
		let productValue = value.asProductValue();
		let x = productValue.elements[0].asNumber();
		let y = productValue.elements[1].asNumber();
		let z = productValue.elements[2].asString();
		return new this(x, y, z);
	}

	public static count(): number
	{
		return window.__SPACETIMEDB__.clientDB.getTable("TestA").count();
	}

	public static all(): TestA[]
	{
		return window.__SPACETIMEDB__.clientDB.getTable("TestA").getInstances() as TestA[];
	}

	public static filterByX(value: number): TestA[] | null
	{
		let result: TestA[] = [];
		for(let entry of window.__SPACETIMEDB__.clientDB.getTable("TestA").getEntries())
		{
			var productValue = entry.asProductValue();
			let compareValue = productValue.elements[0].asU32() as number;
			if (compareValue == value) {
				result.push(TestA.fromValue(entry));
			}
		}
		return result;
	}

	public static filterByY(value: number): TestA[] | null
	{
		let result: TestA[] = [];
		for(let entry of window.__SPACETIMEDB__.clientDB.getTable("TestA").getEntries())
		{
			var productValue = entry.asProductValue();
			let compareValue = productValue.elements[1].asU32() as number;
			if (compareValue == value) {
				result.push(TestA.fromValue(entry));
			}
		}
		return result;
	}

	public static filterByZ(value: string): TestA[] | null
	{
		let result: TestA[] = [];
		for(let entry of window.__SPACETIMEDB__.clientDB.getTable("TestA").getEntries())
		{
			var productValue = entry.asProductValue();
			let compareValue = productValue.elements[2].asString() as string;
			if (compareValue == value) {
				result.push(TestA.fromValue(entry));
			}
		}
		return result;
	}


	public static onInsert(callback: (value: TestA) => void)
	{
		window.__SPACETIMEDB__.clientDB.getTable("TestA").onInsert(callback);
	}

	public static onUpdate(callback: (oldValue: TestA, newValue: TestA) => void)
	{
		window.__SPACETIMEDB__.clientDB.getTable("TestA").onUpdate(callback);
	}

	public static onDelete(callback: (value: TestA) => void)
	{
		window.__SPACETIMEDB__.clientDB.getTable("TestA").onDelete(callback);
	}

	public static removeOnInsert(callback: (value: TestA) => void)
	{
		window.__SPACETIMEDB__.clientDB.getTable("TestA").removeOnInsert(callback);
	}

	public static removeOnUpdate(callback: (oldValue: TestA, newValue: TestA) => void)
	{
		window.__SPACETIMEDB__.clientDB.getTable("TestA").removeOnUpdate(callback);
	}

	public static removeOnDelete(callback: (value: TestA) => void)
	{
		window.__SPACETIMEDB__.clientDB.getTable("TestA").removeOnDelete(callback);
	}

}
'''
"test_b.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

import { AlgebraicType, ProductType, BuiltinType, ProductTypeElement, SumType, SumTypeVariant, IDatabaseTable, AlgebraicValue } from "@clockworklabs/spacetimedb-typescript-sdk";

export class TestB extends IDatabaseTable
{
	public static tableName = "TestB";
	public foo: string;

	constructor(foo: string) {
	super();
		this.foo = foo;
	}

	public static serialize(value: TestB): object {
		return [
		value.foo
		];
	}

	public static getAlgebraicType(): AlgebraicType
	{
		return AlgebraicType.createProductType([
			new ProductTypeElement("foo", AlgebraicType.createPrimitiveType(BuiltinType.Type.String)),
		]);
	}

	public static fromValue(value: AlgebraicValue): TestB
	{
		let productValue = value.asProductValue();
		let foo = productValue.elements[0].asString();
		return new this(foo);
	}

}
'''
"test_reducer.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

import { AlgebraicType, ProductType, BuiltinType, ProductTypeElement, IDatabaseTable, AlgebraicValue } from "@clockworklabs/spacetimedb-typescript-sdk";
import { TestA } from "./test_a";
import { TestB } from "./test_b";
import { Namespace.TestC } from "./namespace.test_c";

export class TestReducer
{
	public static call(arg: TestA, arg2: TestB, arg3: Namespace.TestC)
	{
		if (window.__SPACETIMEDB__.spacetimeDBClient) {
			window.__SPACETIMEDB__.spacetimeDBClient.call("test", [TestA.serialize(arg), TestB.serialize(arg2), Namespace.TestC.serialize(arg3)]);
		}
	}

	public static deserializeArgs(rawArgs: any[]): any[] {
		let argType = TestA.getAlgebraicType();
		let argValue = AlgebraicValue.deserialize(argType, rawArgs[0])
		let arg = TestA.fromValue(argValue);
		let arg2Type = TestB.getAlgebraicType();
		let arg2Value = AlgebraicValue.deserialize(arg2Type, rawArgs[1])
		let arg2 = TestB.fromValue(arg2Value);
		let arg3Type = Namespace.TestC.getAlgebraicType();
		let arg3Value = AlgebraicValue.deserialize(arg3Type, rawArgs[2])
		let arg3 = Namespace.TestC.fromValue(arg3Value);
		return [arg, arg2, arg3];
	}

	public static on(callback: (status: string, identity: string, reducerArgs: any[]) => void)
	{
		if (window.__SPACETIMEDB__.spacetimeDBClient) {
			window.__SPACETIMEDB__.spacetimeDBClient.onEvent("reducer:Test", callback);
		}
	}
}

window.__SPACETIMEDB__.reducers.set("Test", TestReducer);
if (window.__SPACETIMEDB__.spacetimeDBClient) {
	window.__SPACETIMEDB__.spacetimeDBClient.registerReducer("Test", TestReducer);
}
'''
