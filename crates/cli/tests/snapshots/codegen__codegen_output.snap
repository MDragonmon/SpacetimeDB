---
source: crates/cli/tests/codegen.rs
expression: outfiles
---
"NamespaceTestC.cs" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

using System;

namespace SpacetimeDB
{
	public partial class Namespace
	{
		public partial class Types
		{
			public enum TestC
			{
				Foo,
				Bar,
			}
		}
		public static SpacetimeDB.SATS.AlgebraicType GetAlgebraicTypeForTestC()
		{
			return SpacetimeDB.SATS.AlgebraicType.CreateSumType(new System.Collections.Generic.List<SpacetimeDB.SATS.SumTypeVariant>
			{
				new SpacetimeDB.SATS.SumTypeVariant("Foo", SpacetimeDB.SATS.AlgebraicType.CreateProductType(new SpacetimeDB.SATS.ProductTypeElement[]
			{
			})),
				new SpacetimeDB.SATS.SumTypeVariant("Bar", SpacetimeDB.SATS.AlgebraicType.CreateProductType(new SpacetimeDB.SATS.ProductTypeElement[]
			{
			})),
			});
		}
		public static Namespace.Types.TestC IntoTestC(SpacetimeDB.SATS.AlgebraicValue value)
		{
			var sumValue = value.AsSumValue();
			switch(sumValue.tag)
			{
				case 0:
					return Namespace.Types.TestC.Foo;
				case 1:
					return Namespace.Types.TestC.Bar;
			}

			return default;
		}
	}
}
'''
"RepeatingTestReducer.cs" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

using System;
using ClientApi;
using Newtonsoft.Json.Linq;

namespace SpacetimeDB
{
	public static partial class Reducer
	{
		public static event Action<ClientApi.Event.Types.Status, Identity, ulong> OnRepeatingTestEvent;

		public static void RepeatingTest(ulong prevTime)
		{
			var _argArray = new object[] {prevTime};
			var _message = new NetworkManager.ReducerCallRequest {
				fn = "repeating_test",
				args = _argArray,
			};
			Newtonsoft.Json.JsonSerializerSettings _settings = new Newtonsoft.Json.JsonSerializerSettings
			{
				Converters = { new SpacetimeDB.SomeWrapperConverter(), new SpacetimeDB.EnumWrapperConverter() },
				ContractResolver = new SpacetimeDB.JsonContractResolver(),
			};
			NetworkManager.instance.InternalCallReducer(Newtonsoft.Json.JsonConvert.SerializeObject(_message, _settings));
		}

		[ReducerEvent(FunctionName = "repeating_test")]
		public static void OnRepeatingTest(ClientApi.Event dbEvent)
		{
			if(OnRepeatingTestEvent != null)
			{
				var bsatnBytes = dbEvent.FunctionCall.ArgBytes;
				using var ms = new System.IO.MemoryStream();
				ms.SetLength(bsatnBytes.Length);
				bsatnBytes.CopyTo(ms.GetBuffer(), 0);
				ms.Position = 0;
				using var reader = new System.IO.BinaryReader(ms);
				var args_0_value = SpacetimeDB.SATS.AlgebraicValue.Deserialize(SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.U64), reader);
				var args_0 = args_0_value.AsU64();
				OnRepeatingTestEvent(dbEvent.Status, Identity.From(dbEvent.CallerIdentity.ToByteArray()), args_0);
			}
		}
		[DeserializeEvent(FunctionName = "repeating_test")]
		public static object[] RepeatingTestDeserializeEventArgs(ClientApi.Event dbEvent)
		{
			var bsatnBytes = dbEvent.FunctionCall.ArgBytes;
			using var ms = new System.IO.MemoryStream();
			ms.SetLength(bsatnBytes.Length);
			bsatnBytes.CopyTo(ms.GetBuffer(), 0);
			ms.Position = 0;
			using var reader = new System.IO.BinaryReader(ms);
			var args_0_value = SpacetimeDB.SATS.AlgebraicValue.Deserialize(SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.U64), reader);
			var args_0 = args_0_value.AsU64();
			return new object[] {
				args_0,
			};
		}
	}
}
'''
"TestA.cs" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

using System;

namespace SpacetimeDB
{
	public partial class TestA : IDatabaseTable
	{
		[Newtonsoft.Json.JsonProperty("x")]
		public uint X;
		[Newtonsoft.Json.JsonProperty("y")]
		public uint Y;
		[Newtonsoft.Json.JsonProperty("z")]
		public string Z;

		public static SpacetimeDB.SATS.AlgebraicType GetAlgebraicType()
		{
			return SpacetimeDB.SATS.AlgebraicType.CreateProductType(new SpacetimeDB.SATS.ProductTypeElement[]
			{
				new SpacetimeDB.SATS.ProductTypeElement("x", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.U32)),
				new SpacetimeDB.SATS.ProductTypeElement("y", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.U32)),
				new SpacetimeDB.SATS.ProductTypeElement("z", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.String)),
			});
		}

		public static explicit operator TestA(SpacetimeDB.SATS.AlgebraicValue value)
		{
			if (value == null) {
				return null;
			}
			var productValue = value.AsProductValue();
			return new TestA
			{
				X = productValue.elements[0].AsU32(),
				Y = productValue.elements[1].AsU32(),
				Z = productValue.elements[2].AsString(),
			};
		}

		public static System.Collections.Generic.IEnumerable<TestA> Iter()
		{
			foreach(var entry in NetworkManager.clientDB.GetEntries("TestA"))
			{
				yield return (TestA)entry;
			}
		}
		public static int Count()
		{
			return NetworkManager.clientDB.Count("TestA");
		}
		public static System.Collections.Generic.IEnumerable<TestA> FilterByX(uint value)
		{
			foreach(var entry in NetworkManager.clientDB.GetEntries("TestA"))
			{
				var productValue = entry.AsProductValue();
				var compareValue = (uint)productValue.elements[0].AsU32();
				if (compareValue == value) {
					yield return (TestA)entry;
				}
			}
		}

		public static System.Collections.Generic.IEnumerable<TestA> FilterByY(uint value)
		{
			foreach(var entry in NetworkManager.clientDB.GetEntries("TestA"))
			{
				var productValue = entry.AsProductValue();
				var compareValue = (uint)productValue.elements[1].AsU32();
				if (compareValue == value) {
					yield return (TestA)entry;
				}
			}
		}

		public static System.Collections.Generic.IEnumerable<TestA> FilterByZ(string value)
		{
			foreach(var entry in NetworkManager.clientDB.GetEntries("TestA"))
			{
				var productValue = entry.AsProductValue();
				var compareValue = (string)productValue.elements[2].AsString();
				if (compareValue == value) {
					yield return (TestA)entry;
				}
			}
		}

		public static event Action<TestA> OnInsert;
		public static event Action<TestA, TestA> OnUpdate;
		public static event Action<TestA> OnDelete;
		public static event Action<NetworkManager.TableOp, TestA, TestA> OnRowUpdate;

		public static void OnInsertEvent(object newValue)
		{
			OnInsert?.Invoke((TestA)newValue);
		}

		public static void OnUpdateEvent(object oldValue, object newValue)
		{
			OnUpdate?.Invoke((TestA)oldValue,(TestA)newValue);
		}

		public static void OnDeleteEvent(object oldValue)
		{
			OnDelete?.Invoke((TestA)oldValue);
		}

		public static void OnRowUpdateEvent(NetworkManager.TableOp op, object oldValue, object newValue)
		{
			OnRowUpdate?.Invoke(op, (TestA)oldValue,(TestA)newValue);
		}
	}
}
'''
"TestB.cs" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

using System;

namespace SpacetimeDB
{
	public partial class TestB : IDatabaseTable
	{
		[Newtonsoft.Json.JsonProperty("foo")]
		public string Foo;

		public static SpacetimeDB.SATS.AlgebraicType GetAlgebraicType()
		{
			return SpacetimeDB.SATS.AlgebraicType.CreateProductType(new SpacetimeDB.SATS.ProductTypeElement[]
			{
				new SpacetimeDB.SATS.ProductTypeElement("foo", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.String)),
			});
		}

		public static explicit operator TestB(SpacetimeDB.SATS.AlgebraicValue value)
		{
			if (value == null) {
				return null;
			}
			var productValue = value.AsProductValue();
			return new TestB
			{
				Foo = productValue.elements[0].AsString(),
			};
		}

	}
}
'''
"TestReducer.cs" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

using System;
using ClientApi;
using Newtonsoft.Json.Linq;

namespace SpacetimeDB
{
	public static partial class Reducer
	{
		public static event Action<ClientApi.Event.Types.Status, Identity, SpacetimeDB.TestA, SpacetimeDB.TestB, SpacetimeDB.Namespace.Types.TestC> OnTestEvent;

		public static void Test(SpacetimeDB.TestA arg, SpacetimeDB.TestB arg2, SpacetimeDB.Namespace.Types.TestC arg3)
		{
			var _argArray = new object[] {arg, arg2, new EnumWrapper(arg3)};
			var _message = new NetworkManager.ReducerCallRequest {
				fn = "test",
				args = _argArray,
			};
			Newtonsoft.Json.JsonSerializerSettings _settings = new Newtonsoft.Json.JsonSerializerSettings
			{
				Converters = { new SpacetimeDB.SomeWrapperConverter(), new SpacetimeDB.EnumWrapperConverter() },
				ContractResolver = new SpacetimeDB.JsonContractResolver(),
			};
			NetworkManager.instance.InternalCallReducer(Newtonsoft.Json.JsonConvert.SerializeObject(_message, _settings));
		}

		[ReducerEvent(FunctionName = "test")]
		public static void OnTest(ClientApi.Event dbEvent)
		{
			if(OnTestEvent != null)
			{
				var bsatnBytes = dbEvent.FunctionCall.ArgBytes;
				using var ms = new System.IO.MemoryStream();
				ms.SetLength(bsatnBytes.Length);
				bsatnBytes.CopyTo(ms.GetBuffer(), 0);
				ms.Position = 0;
				using var reader = new System.IO.BinaryReader(ms);
				var args_0_value = SpacetimeDB.SATS.AlgebraicValue.Deserialize(SpacetimeDB.TestA.GetAlgebraicType(), reader);
				var args_0 = (SpacetimeDB.TestA)(args_0_value);
				var args_1_value = SpacetimeDB.SATS.AlgebraicValue.Deserialize(SpacetimeDB.TestB.GetAlgebraicType(), reader);
				var args_1 = (SpacetimeDB.TestB)(args_1_value);
				var args_2_value = SpacetimeDB.SATS.AlgebraicValue.Deserialize(SpacetimeDB.Namespace.GetAlgebraicTypeForTestC(), reader);
				var args_2 = SpacetimeDB.Namespace.IntoTestC(args_2_value);
				OnTestEvent(dbEvent.Status, Identity.From(dbEvent.CallerIdentity.ToByteArray()), args_0, args_1, args_2);
			}
		}
		[DeserializeEvent(FunctionName = "test")]
		public static object[] TestDeserializeEventArgs(ClientApi.Event dbEvent)
		{
			var bsatnBytes = dbEvent.FunctionCall.ArgBytes;
			using var ms = new System.IO.MemoryStream();
			ms.SetLength(bsatnBytes.Length);
			bsatnBytes.CopyTo(ms.GetBuffer(), 0);
			ms.Position = 0;
			using var reader = new System.IO.BinaryReader(ms);
			var args_0_value = SpacetimeDB.SATS.AlgebraicValue.Deserialize(SpacetimeDB.TestA.GetAlgebraicType(), reader);
			var args_0 = (SpacetimeDB.TestA)(args_0_value);
			var args_1_value = SpacetimeDB.SATS.AlgebraicValue.Deserialize(SpacetimeDB.TestB.GetAlgebraicType(), reader);
			var args_1 = (SpacetimeDB.TestB)(args_1_value);
			var args_2_value = SpacetimeDB.SATS.AlgebraicValue.Deserialize(SpacetimeDB.Namespace.GetAlgebraicTypeForTestC(), reader);
			var args_2 = SpacetimeDB.Namespace.IntoTestC(args_2_value);
			return new object[] {
				args_0,
				args_1,
				args_2,
			};
		}
	}
}
'''
