---
source: crates/cli/tests/codegen.rs
expression: outfiles
---
"RepeatingTestReducer.cs" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

using System;
using ClientApi;
using Newtonsoft.Json.Linq;

namespace SpacetimeDB
{
	public static partial class Reducer
	{
		public static event Action<ClientApi.Event.Types.Status, Hash, ulong> OnRepeatingTestEvent;

		public static void RepeatingTest(ulong prevTime)
		{
			NetworkManager.instance.InternalCallReducer(new NetworkManager.Message
			{
				fn = "repeating_test",
				args = new object[] { prevTime },
			});
		}

		[ReducerEvent(FunctionName = "repeating_test")]
		public static void OnRepeatingTest(ClientApi.Event dbEvent)
		{
			if(OnRepeatingTestEvent != null)
			{
				var jsonString = dbEvent.FunctionCall.ArgBytes.ToStringUtf8();
				var args = Newtonsoft.Json.JsonConvert.DeserializeObject<JArray>(jsonString);
				if(args.Count >= 1)
				{
					OnRepeatingTestEvent(dbEvent.Status, Hash.From(dbEvent.CallerIdentity.ToByteArray()), args[0].ToObject<ulong>());
				}
			}
		}
	}
}
'''
"TestA.cs" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

using System;

namespace SpacetimeDB
{
	public partial class TestA : IDatabaseTable
	{
		[Newtonsoft.Json.JsonProperty("x")]
		public uint X;
		[Newtonsoft.Json.JsonProperty("y")]
		public uint Y;
		[Newtonsoft.Json.JsonProperty("z")]
		public string Z;

		public static TypeDef GetTypeDef()
		{
			return TypeDef.Tuple(new ElementDef[]
			{
				new SpacetimeDB.ElementDef(0, SpacetimeDB.TypeDef.BuiltInType(SpacetimeDB.TypeDef.Def.U32)),
				new SpacetimeDB.ElementDef(1, SpacetimeDB.TypeDef.BuiltInType(SpacetimeDB.TypeDef.Def.U32)),
				new SpacetimeDB.ElementDef(2, SpacetimeDB.TypeDef.BuiltInType(SpacetimeDB.TypeDef.Def.String)),
			});
		}

		public static explicit operator TestA(TypeValue value)
		{
			var tupleValue = value.GetValue(TypeDef.Def.Tuple) as TypeValue[];
			if (tupleValue == null)
			{
				throw new System.InvalidOperationException($"Invalid value (must be Tuple): {value.TypeDef.Type}");
			}

			return new TestA
			{
				X = (uint)tupleValue[0].GetValue(TypeDef.Def.U32),
				Y = (uint)tupleValue[1].GetValue(TypeDef.Def.U32),
				Z = (string)tupleValue[2].GetValue(TypeDef.Def.String),
			};
		}
		public static System.Collections.Generic.IEnumerable<TestA> Iter()
		{
			foreach(var entry in NetworkManager.clientDB.GetEntries("TestA"))
			{
				var tupleArr = entry.GetValue(TypeDef.Def.Tuple) as TypeValue[];
				if (tupleArr == null) continue;
				yield return (TestA)entry;
			}
		}
		public static int Count()
		{
			return NetworkManager.clientDB.Count("TestA");
		}
		public static System.Collections.Generic.IEnumerable<TestA> FilterByX(uint value)
		{
			foreach(var entry in NetworkManager.clientDB.GetEntries("TestA"))
			{
				var tupleArr = entry.GetValue(TypeDef.Def.Tuple) as TypeValue[];
				if (tupleArr == null) continue;
				var compareValue = (uint)tupleArr[0].GetValue(TypeDef.Def.U32);
				if (compareValue == value)
					yield return (TestA)entry;
			}
		}

		public static System.Collections.Generic.IEnumerable<TestA> FilterByY(uint value)
		{
			foreach(var entry in NetworkManager.clientDB.GetEntries("TestA"))
			{
				var tupleArr = entry.GetValue(TypeDef.Def.Tuple) as TypeValue[];
				if (tupleArr == null) continue;
				var compareValue = (uint)tupleArr[1].GetValue(TypeDef.Def.U32);
				if (compareValue == value)
					yield return (TestA)entry;
			}
		}

		public static System.Collections.Generic.IEnumerable<TestA> FilterByZ(string value)
		{
			foreach(var entry in NetworkManager.clientDB.GetEntries("TestA"))
			{
				var tupleArr = entry.GetValue(TypeDef.Def.Tuple) as TypeValue[];
				if (tupleArr == null) continue;
				var compareValue = (string)tupleArr[2].GetValue(TypeDef.Def.String);
				if (compareValue == value)
					yield return (TestA)entry;
			}
		}

		public static event Action<TestA> OnInsert;
		public static event Action<TestA, TestA> OnUpdate;
		public static event Action<TestA> OnDelete;
		public static event Action<NetworkManager.TableOp, TestA, TestA> OnRowUpdate;

		public static void OnInsertEvent(object newValue)
		{
			OnInsert?.Invoke((TestA)newValue);
		}

		public static void OnUpdateEvent(object oldValue, object newValue)
		{
			OnUpdate?.Invoke((TestA)oldValue,(TestA)newValue);
		}

		public static void OnDeleteEvent(object oldValue)
		{
			OnDelete?.Invoke((TestA)oldValue);
		}

		public static void OnRowUpdateEvent(NetworkManager.TableOp op, object oldValue, object newValue)
		{
			OnRowUpdate?.Invoke(op, (TestA)oldValue,(TestA)newValue);
		}
	}
}
'''
"TestB.cs" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

using System;

namespace SpacetimeDB
{
	public partial class TestB : IDatabaseTable
	{
		[Newtonsoft.Json.JsonProperty("foo")]
		public string Foo;

		public static TypeDef GetTypeDef()
		{
			return TypeDef.Tuple(new ElementDef[]
			{
				new SpacetimeDB.ElementDef(0, SpacetimeDB.TypeDef.BuiltInType(SpacetimeDB.TypeDef.Def.String)),
			});
		}

		public static explicit operator TestB(TypeValue value)
		{
			var tupleValue = value.GetValue(TypeDef.Def.Tuple) as TypeValue[];
			if (tupleValue == null)
			{
				throw new System.InvalidOperationException($"Invalid value (must be Tuple): {value.TypeDef.Type}");
			}

			return new TestB
			{
				Foo = (string)tupleValue[0].GetValue(TypeDef.Def.String),
			};
		}
	}
}
'''
"TestReducer.cs" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

using System;
using ClientApi;
using Newtonsoft.Json.Linq;

namespace SpacetimeDB
{
	public static partial class Reducer
	{
		public static event Action<ClientApi.Event.Types.Status, Hash, TestA, TestB, TestC> OnTestEvent;

		public static void Test(TestA arg, TestB arg2, TestC arg3)
		{
			NetworkManager.instance.InternalCallReducer(new NetworkManager.Message
			{
				fn = "test",
				args = new object[] { arg, arg2, arg3 },
			});
		}

		[ReducerEvent(FunctionName = "test")]
		public static void OnTest(ClientApi.Event dbEvent)
		{
			if(OnTestEvent != null)
			{
				var jsonString = dbEvent.FunctionCall.ArgBytes.ToStringUtf8();
				var args = Newtonsoft.Json.JsonConvert.DeserializeObject<JArray>(jsonString);
				if(args.Count >= 3)
				{
					OnTestEvent(dbEvent.Status, Hash.From(dbEvent.CallerIdentity.ToByteArray()), args[0].ToObject<TestA>(), args[1].ToObject<TestB>(), args[2].ToObject<TestC>());
				}
			}
		}
	}
}
'''
