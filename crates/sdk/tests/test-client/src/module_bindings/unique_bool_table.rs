// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused)]
use super::unique_bool_type::UniqueBool;
use spacetimedb_sdk::{
    self as __sdk,
    anyhow::{self as __anyhow, Context as _},
    lib as __lib, sats as __sats, ws_messages as __ws,
};

pub struct UniqueBoolTableHandle<'ctx> {
    imp: __sdk::db_connection::TableHandle<UniqueBool>,
    ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
pub trait UniqueBoolTableAccess {
    #[allow(non_snake_case)]
    fn unique_bool(&self) -> UniqueBoolTableHandle<'_>;
}

impl UniqueBoolTableAccess for super::RemoteTables {
    fn unique_bool(&self) -> UniqueBoolTableHandle<'_> {
        UniqueBoolTableHandle {
            imp: self.imp.get_table::<UniqueBool>("UniqueBool"),
            ctx: std::marker::PhantomData,
        }
    }
}

pub struct UniqueBoolInsertCallbackId(__sdk::callbacks::CallbackId);
pub struct UniqueBoolDeleteCallbackId(__sdk::callbacks::CallbackId);

impl<'ctx> __sdk::table::Table for UniqueBoolTableHandle<'ctx> {
    type Row = UniqueBool;
    type EventContext = super::EventContext;

    fn count(&self) -> u64 {
        self.imp.count()
    }
    fn iter(&self) -> impl Iterator<Item = UniqueBool> + '_ {
        self.imp.iter()
    }

    type InsertCallbackId = UniqueBoolInsertCallbackId;

    fn on_insert(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> UniqueBoolInsertCallbackId {
        UniqueBoolInsertCallbackId(self.imp.on_insert(Box::new(callback)))
    }

    fn remove_on_insert(&self, callback: UniqueBoolInsertCallbackId) {
        self.imp.remove_on_insert(callback.0)
    }

    type DeleteCallbackId = UniqueBoolDeleteCallbackId;

    fn on_delete(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> UniqueBoolDeleteCallbackId {
        UniqueBoolDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
    }

    fn remove_on_delete(&self, callback: UniqueBoolDeleteCallbackId) {
        self.imp.remove_on_delete(callback.0)
    }
}

pub(super) fn parse_table_update(
    deletes: Vec<__ws::EncodedValue>,
    inserts: Vec<__ws::EncodedValue>,
) -> __anyhow::Result<__sdk::spacetime_module::TableUpdate<UniqueBool>> {
    __sdk::spacetime_module::TableUpdate::parse_table_update_no_primary_key(deletes, inserts)
        .context("Failed to parse table update for table \"UniqueBool\"")
}

pub struct UniqueBoolBUnique<'ctx> {
    imp: __sdk::client_cache::UniqueConstraint<UniqueBool, bool>,
    phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> UniqueBoolTableHandle<'ctx> {
    pub fn b(&self) -> UniqueBoolBUnique<'ctx> {
        UniqueBoolBUnique {
            imp: self.imp.get_unique_constraint::<bool>("b", |row| &row.b),
            phantom: std::marker::PhantomData,
        }
    }
}

impl<'ctx> UniqueBoolBUnique<'ctx> {
    pub fn find(&self, col_val: &bool) -> Option<UniqueBool> {
        self.imp.find(col_val)
    }
}
