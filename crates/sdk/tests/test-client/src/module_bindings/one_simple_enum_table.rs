// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused)]
use super::one_simple_enum_type::OneSimpleEnum;
use super::simple_enum_type::SimpleEnum;
use spacetimedb_sdk::{
    self as __sdk,
    anyhow::{self as __anyhow, Context as _},
    lib as __lib, sats as __sats, ws_messages as __ws,
};

pub struct OneSimpleEnumTableHandle<'ctx> {
    imp: __sdk::db_connection::TableHandle<OneSimpleEnum>,
    ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
pub trait OneSimpleEnumTableAccess {
    #[allow(non_snake_case)]
    fn one_simple_enum(&self) -> OneSimpleEnumTableHandle<'_>;
}

impl OneSimpleEnumTableAccess for super::RemoteTables {
    fn one_simple_enum(&self) -> OneSimpleEnumTableHandle<'_> {
        OneSimpleEnumTableHandle {
            imp: self.imp.get_table::<OneSimpleEnum>("OneSimpleEnum"),
            ctx: std::marker::PhantomData,
        }
    }
}

pub struct OneSimpleEnumInsertCallbackId(__sdk::callbacks::CallbackId);
pub struct OneSimpleEnumDeleteCallbackId(__sdk::callbacks::CallbackId);

impl<'ctx> __sdk::table::Table for OneSimpleEnumTableHandle<'ctx> {
    type Row = OneSimpleEnum;
    type EventContext = super::EventContext;

    fn count(&self) -> u64 {
        self.imp.count()
    }
    fn iter(&self) -> impl Iterator<Item = OneSimpleEnum> + '_ {
        self.imp.iter()
    }

    type InsertCallbackId = OneSimpleEnumInsertCallbackId;

    fn on_insert(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> OneSimpleEnumInsertCallbackId {
        OneSimpleEnumInsertCallbackId(self.imp.on_insert(Box::new(callback)))
    }

    fn remove_on_insert(&self, callback: OneSimpleEnumInsertCallbackId) {
        self.imp.remove_on_insert(callback.0)
    }

    type DeleteCallbackId = OneSimpleEnumDeleteCallbackId;

    fn on_delete(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> OneSimpleEnumDeleteCallbackId {
        OneSimpleEnumDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
    }

    fn remove_on_delete(&self, callback: OneSimpleEnumDeleteCallbackId) {
        self.imp.remove_on_delete(callback.0)
    }
}

pub(super) fn parse_table_update(
    deletes: Vec<__ws::EncodedValue>,
    inserts: Vec<__ws::EncodedValue>,
) -> __anyhow::Result<__sdk::spacetime_module::TableUpdate<OneSimpleEnum>> {
    __sdk::spacetime_module::TableUpdate::parse_table_update_no_primary_key(deletes, inserts)
        .context("Failed to parse table update for table \"OneSimpleEnum\"")
}
