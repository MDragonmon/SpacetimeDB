// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused)]
use super::byte_struct_type::ByteStruct;
use super::vec_byte_struct_type::VecByteStruct;
use spacetimedb_sdk::{
    self as __sdk,
    anyhow::{self as __anyhow, Context as _},
    lib as __lib, sats as __sats, ws_messages as __ws,
};

pub struct VecByteStructTableHandle<'ctx> {
    imp: __sdk::db_connection::TableHandle<VecByteStruct>,
    ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
pub trait VecByteStructTableAccess {
    #[allow(non_snake_case)]
    fn vec_byte_struct(&self) -> VecByteStructTableHandle<'_>;
}

impl VecByteStructTableAccess for super::RemoteTables {
    fn vec_byte_struct(&self) -> VecByteStructTableHandle<'_> {
        VecByteStructTableHandle {
            imp: self.imp.get_table::<VecByteStruct>("VecByteStruct"),
            ctx: std::marker::PhantomData,
        }
    }
}

pub struct VecByteStructInsertCallbackId(__sdk::callbacks::CallbackId);
pub struct VecByteStructDeleteCallbackId(__sdk::callbacks::CallbackId);

impl<'ctx> __sdk::table::Table for VecByteStructTableHandle<'ctx> {
    type Row = VecByteStruct;
    type EventContext = super::EventContext;

    fn count(&self) -> u64 {
        self.imp.count()
    }
    fn iter(&self) -> impl Iterator<Item = VecByteStruct> + '_ {
        self.imp.iter()
    }

    type InsertCallbackId = VecByteStructInsertCallbackId;

    fn on_insert(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> VecByteStructInsertCallbackId {
        VecByteStructInsertCallbackId(self.imp.on_insert(Box::new(callback)))
    }

    fn remove_on_insert(&self, callback: VecByteStructInsertCallbackId) {
        self.imp.remove_on_insert(callback.0)
    }

    type DeleteCallbackId = VecByteStructDeleteCallbackId;

    fn on_delete(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> VecByteStructDeleteCallbackId {
        VecByteStructDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
    }

    fn remove_on_delete(&self, callback: VecByteStructDeleteCallbackId) {
        self.imp.remove_on_delete(callback.0)
    }
}

pub(super) fn parse_table_update(
    deletes: Vec<__ws::EncodedValue>,
    inserts: Vec<__ws::EncodedValue>,
) -> __anyhow::Result<__sdk::spacetime_module::TableUpdate<VecByteStruct>> {
    __sdk::spacetime_module::TableUpdate::parse_table_update_no_primary_key(deletes, inserts)
        .context("Failed to parse table update for table \"VecByteStruct\"")
}
