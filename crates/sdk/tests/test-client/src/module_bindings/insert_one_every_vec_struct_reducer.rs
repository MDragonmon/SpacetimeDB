// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused)]
use spacetimedb_sdk::{
    self as __sdk,
    anyhow::{self as __anyhow, Context as _},
    lib as __lib, sats as __sats, ws_messages as __ws,
};

use super::every_vec_struct_type::EveryVecStruct;

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub struct InsertOneEveryVecStruct {
    pub s: EveryVecStruct,
}

impl __sdk::spacetime_module::InModule for InsertOneEveryVecStruct {
    type Module = super::RemoteModule;
}

pub struct InsertOneEveryVecStructCallbackId(__sdk::callbacks::CallbackId);

#[allow(non_camel_case_types)]
pub trait insert_one_every_vec_struct {
    fn insert_one_every_vec_struct(&self, s: EveryVecStruct) -> __anyhow::Result<()>;
    fn on_insert_one_every_vec_struct(
        &self,
        callback: impl FnMut(&super::EventContext, &EveryVecStruct) + Send + 'static,
    ) -> InsertOneEveryVecStructCallbackId;
    fn remove_on_insert_one_every_vec_struct(&self, callback: InsertOneEveryVecStructCallbackId);
}

impl insert_one_every_vec_struct for super::RemoteReducers {
    fn insert_one_every_vec_struct(&self, s: EveryVecStruct) -> __anyhow::Result<()> {
        self.imp
            .call_reducer("insert_one_every_vec_struct", InsertOneEveryVecStruct { s })
    }
    fn on_insert_one_every_vec_struct(
        &self,
        mut callback: impl FnMut(&super::EventContext, &EveryVecStruct) + Send + 'static,
    ) -> InsertOneEveryVecStructCallbackId {
        InsertOneEveryVecStructCallbackId(self.imp.on_reducer::<InsertOneEveryVecStruct>(
            "insert_one_every_vec_struct",
            Box::new(move |ctx: &super::EventContext, args: &InsertOneEveryVecStruct| callback(ctx, &args.s)),
        ))
    }
    fn remove_on_insert_one_every_vec_struct(&self, callback: InsertOneEveryVecStructCallbackId) {
        self.imp
            .remove_on_reducer::<InsertOneEveryVecStruct>("insert_one_every_vec_struct", callback.0)
    }
}
