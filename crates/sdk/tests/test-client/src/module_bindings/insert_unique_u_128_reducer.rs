// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused)]
use spacetimedb_sdk::{
    self as __sdk,
    anyhow::{self as __anyhow, Context as _},
    lib as __lib, sats as __sats, ws_messages as __ws,
};

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub struct InsertUniqueU128 {
    pub n: u128,
    pub data: i32,
}

impl __sdk::spacetime_module::InModule for InsertUniqueU128 {
    type Module = super::RemoteModule;
}

pub struct InsertUniqueU128CallbackId(__sdk::callbacks::CallbackId);

#[allow(non_camel_case_types)]
pub trait insert_unique_u_128 {
    fn insert_unique_u_128(&self, n: u128, data: i32) -> __anyhow::Result<()>;
    fn on_insert_unique_u_128(
        &self,
        callback: impl FnMut(&super::EventContext, &u128, &i32) + Send + 'static,
    ) -> InsertUniqueU128CallbackId;
    fn remove_on_insert_unique_u_128(&self, callback: InsertUniqueU128CallbackId);
}

impl insert_unique_u_128 for super::RemoteReducers {
    fn insert_unique_u_128(&self, n: u128, data: i32) -> __anyhow::Result<()> {
        self.imp
            .call_reducer("insert_unique_u128", InsertUniqueU128 { n, data })
    }
    fn on_insert_unique_u_128(
        &self,
        mut callback: impl FnMut(&super::EventContext, &u128, &i32) + Send + 'static,
    ) -> InsertUniqueU128CallbackId {
        InsertUniqueU128CallbackId(self.imp.on_reducer::<InsertUniqueU128>(
            "insert_unique_u128",
            Box::new(move |ctx: &super::EventContext, args: &InsertUniqueU128| callback(ctx, &args.n, &args.data)),
        ))
    }
    fn remove_on_insert_unique_u_128(&self, callback: InsertUniqueU128CallbackId) {
        self.imp
            .remove_on_reducer::<InsertUniqueU128>("insert_unique_u128", callback.0)
    }
}
