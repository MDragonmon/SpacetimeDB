// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused)]
use spacetimedb_sdk::{
    self as __sdk,
    anyhow::{self as __anyhow, Context as _},
    lib as __lib, sats as __sats, ws_messages as __ws,
};

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub struct DeleteUniqueI32 {
    pub n: i32,
}

impl __sdk::spacetime_module::InModule for DeleteUniqueI32 {
    type Module = super::RemoteModule;
}

pub struct DeleteUniqueI32CallbackId(__sdk::callbacks::CallbackId);

#[allow(non_camel_case_types)]
pub trait delete_unique_i_32 {
    fn delete_unique_i_32(&self, n: i32) -> __anyhow::Result<()>;
    fn on_delete_unique_i_32(
        &self,
        callback: impl FnMut(&super::EventContext, &i32) + Send + 'static,
    ) -> DeleteUniqueI32CallbackId;
    fn remove_on_delete_unique_i_32(&self, callback: DeleteUniqueI32CallbackId);
}

impl delete_unique_i_32 for super::RemoteReducers {
    fn delete_unique_i_32(&self, n: i32) -> __anyhow::Result<()> {
        self.imp.call_reducer("delete_unique_i32", DeleteUniqueI32 { n })
    }
    fn on_delete_unique_i_32(
        &self,
        mut callback: impl FnMut(&super::EventContext, &i32) + Send + 'static,
    ) -> DeleteUniqueI32CallbackId {
        DeleteUniqueI32CallbackId(self.imp.on_reducer::<DeleteUniqueI32>(
            "delete_unique_i32",
            Box::new(move |ctx: &super::EventContext, args: &DeleteUniqueI32| callback(ctx, &args.n)),
        ))
    }
    fn remove_on_delete_unique_i_32(&self, callback: DeleteUniqueI32CallbackId) {
        self.imp
            .remove_on_reducer::<DeleteUniqueI32>("delete_unique_i32", callback.0)
    }
}
