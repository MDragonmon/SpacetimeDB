// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused)]
use super::unit_struct_type::UnitStruct;
use super::vec_unit_struct_type::VecUnitStruct;
use spacetimedb_sdk::{
    self as __sdk,
    anyhow::{self as __anyhow, Context as _},
    lib as __lib, sats as __sats, ws_messages as __ws,
};

pub struct VecUnitStructTableHandle<'ctx> {
    imp: __sdk::db_connection::TableHandle<VecUnitStruct>,
    ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
pub trait VecUnitStructTableAccess {
    #[allow(non_snake_case)]
    fn vec_unit_struct(&self) -> VecUnitStructTableHandle<'_>;
}

impl VecUnitStructTableAccess for super::RemoteTables {
    fn vec_unit_struct(&self) -> VecUnitStructTableHandle<'_> {
        VecUnitStructTableHandle {
            imp: self.imp.get_table::<VecUnitStruct>("VecUnitStruct"),
            ctx: std::marker::PhantomData,
        }
    }
}

pub struct VecUnitStructInsertCallbackId(__sdk::callbacks::CallbackId);
pub struct VecUnitStructDeleteCallbackId(__sdk::callbacks::CallbackId);

impl<'ctx> __sdk::table::Table for VecUnitStructTableHandle<'ctx> {
    type Row = VecUnitStruct;
    type EventContext = super::EventContext;

    fn count(&self) -> u64 {
        self.imp.count()
    }
    fn iter(&self) -> impl Iterator<Item = VecUnitStruct> + '_ {
        self.imp.iter()
    }

    type InsertCallbackId = VecUnitStructInsertCallbackId;

    fn on_insert(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> VecUnitStructInsertCallbackId {
        VecUnitStructInsertCallbackId(self.imp.on_insert(Box::new(callback)))
    }

    fn remove_on_insert(&self, callback: VecUnitStructInsertCallbackId) {
        self.imp.remove_on_insert(callback.0)
    }

    type DeleteCallbackId = VecUnitStructDeleteCallbackId;

    fn on_delete(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> VecUnitStructDeleteCallbackId {
        VecUnitStructDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
    }

    fn remove_on_delete(&self, callback: VecUnitStructDeleteCallbackId) {
        self.imp.remove_on_delete(callback.0)
    }
}

pub(super) fn parse_table_update(
    deletes: Vec<__ws::EncodedValue>,
    inserts: Vec<__ws::EncodedValue>,
) -> __anyhow::Result<__sdk::spacetime_module::TableUpdate<VecUnitStruct>> {
    __sdk::spacetime_module::TableUpdate::parse_table_update_no_primary_key(deletes, inserts)
        .context("Failed to parse table update for table \"VecUnitStruct\"")
}
