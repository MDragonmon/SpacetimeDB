// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused)]
use super::pk_u_8_type::PkU8;
use spacetimedb_sdk::{
    self as __sdk,
    anyhow::{self as __anyhow, Context as _},
    lib as __lib, sats as __sats, ws_messages as __ws,
};

pub struct PkU8TableHandle<'ctx> {
    imp: __sdk::db_connection::TableHandle<PkU8>,
    ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
pub trait PkU8TableAccess {
    #[allow(non_snake_case)]
    fn pk_u_8(&self) -> PkU8TableHandle<'_>;
}

impl PkU8TableAccess for super::RemoteTables {
    fn pk_u_8(&self) -> PkU8TableHandle<'_> {
        PkU8TableHandle {
            imp: self.imp.get_table::<PkU8>("PkU8"),
            ctx: std::marker::PhantomData,
        }
    }
}

pub struct PkU8InsertCallbackId(__sdk::callbacks::CallbackId);
pub struct PkU8DeleteCallbackId(__sdk::callbacks::CallbackId);

impl<'ctx> __sdk::table::Table for PkU8TableHandle<'ctx> {
    type Row = PkU8;
    type EventContext = super::EventContext;

    fn count(&self) -> u64 {
        self.imp.count()
    }
    fn iter(&self) -> impl Iterator<Item = PkU8> + '_ {
        self.imp.iter()
    }

    type InsertCallbackId = PkU8InsertCallbackId;

    fn on_insert(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> PkU8InsertCallbackId {
        PkU8InsertCallbackId(self.imp.on_insert(Box::new(callback)))
    }

    fn remove_on_insert(&self, callback: PkU8InsertCallbackId) {
        self.imp.remove_on_insert(callback.0)
    }

    type DeleteCallbackId = PkU8DeleteCallbackId;

    fn on_delete(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> PkU8DeleteCallbackId {
        PkU8DeleteCallbackId(self.imp.on_delete(Box::new(callback)))
    }

    fn remove_on_delete(&self, callback: PkU8DeleteCallbackId) {
        self.imp.remove_on_delete(callback.0)
    }
}

pub struct PkU8UpdateCallbackId(__sdk::callbacks::CallbackId);

impl<'ctx> __sdk::table::TableWithPrimaryKey for PkU8TableHandle<'ctx> {
    type UpdateCallbackId = PkU8UpdateCallbackId;

    fn on_update(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row, &Self::Row) + Send + 'static,
    ) -> PkU8UpdateCallbackId {
        PkU8UpdateCallbackId(self.imp.on_update(Box::new(callback)))
    }

    fn remove_on_update(&self, callback: PkU8UpdateCallbackId) {
        self.imp.remove_on_update(callback.0)
    }
}

pub(super) fn parse_table_update(
    deletes: Vec<__ws::EncodedValue>,
    inserts: Vec<__ws::EncodedValue>,
) -> __anyhow::Result<__sdk::spacetime_module::TableUpdate<PkU8>> {
    __sdk::spacetime_module::TableUpdate::parse_table_update_with_primary_key::<u8>(deletes, inserts, |row: &PkU8| {
        &row.n
    })
    .context("Failed to parse table update for table \"PkU8\"")
}

pub struct PkU8NUnique<'ctx> {
    imp: __sdk::client_cache::UniqueConstraint<PkU8, u8>,
    phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> PkU8TableHandle<'ctx> {
    pub fn n(&self) -> PkU8NUnique<'ctx> {
        PkU8NUnique {
            imp: self.imp.get_unique_constraint::<u8>("n", |row| &row.n),
            phantom: std::marker::PhantomData,
        }
    }
}

impl<'ctx> PkU8NUnique<'ctx> {
    pub fn find(&self, col_val: &u8) -> Option<PkU8> {
        self.imp.find(col_val)
    }
}
