// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused)]
use super::unique_i_16_type::UniqueI16;
use spacetimedb_sdk::{
    self as __sdk,
    anyhow::{self as __anyhow, Context as _},
    lib as __lib, sats as __sats, ws_messages as __ws,
};

pub struct UniqueI16TableHandle<'ctx> {
    imp: __sdk::db_connection::TableHandle<UniqueI16>,
    ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
pub trait UniqueI16TableAccess {
    #[allow(non_snake_case)]
    fn unique_i_16(&self) -> UniqueI16TableHandle<'_>;
}

impl UniqueI16TableAccess for super::RemoteTables {
    fn unique_i_16(&self) -> UniqueI16TableHandle<'_> {
        UniqueI16TableHandle {
            imp: self.imp.get_table::<UniqueI16>("UniqueI16"),
            ctx: std::marker::PhantomData,
        }
    }
}

pub struct UniqueI16InsertCallbackId(__sdk::callbacks::CallbackId);
pub struct UniqueI16DeleteCallbackId(__sdk::callbacks::CallbackId);

impl<'ctx> __sdk::table::Table for UniqueI16TableHandle<'ctx> {
    type Row = UniqueI16;
    type EventContext = super::EventContext;

    fn count(&self) -> u64 {
        self.imp.count()
    }
    fn iter(&self) -> impl Iterator<Item = UniqueI16> + '_ {
        self.imp.iter()
    }

    type InsertCallbackId = UniqueI16InsertCallbackId;

    fn on_insert(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> UniqueI16InsertCallbackId {
        UniqueI16InsertCallbackId(self.imp.on_insert(Box::new(callback)))
    }

    fn remove_on_insert(&self, callback: UniqueI16InsertCallbackId) {
        self.imp.remove_on_insert(callback.0)
    }

    type DeleteCallbackId = UniqueI16DeleteCallbackId;

    fn on_delete(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> UniqueI16DeleteCallbackId {
        UniqueI16DeleteCallbackId(self.imp.on_delete(Box::new(callback)))
    }

    fn remove_on_delete(&self, callback: UniqueI16DeleteCallbackId) {
        self.imp.remove_on_delete(callback.0)
    }
}

pub(super) fn parse_table_update(
    deletes: Vec<__ws::EncodedValue>,
    inserts: Vec<__ws::EncodedValue>,
) -> __anyhow::Result<__sdk::spacetime_module::TableUpdate<UniqueI16>> {
    __sdk::spacetime_module::TableUpdate::parse_table_update_no_primary_key(deletes, inserts)
        .context("Failed to parse table update for table \"UniqueI16\"")
}

pub struct UniqueI16NUnique<'ctx> {
    imp: __sdk::client_cache::UniqueConstraint<UniqueI16, i16>,
    phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> UniqueI16TableHandle<'ctx> {
    pub fn n(&self) -> UniqueI16NUnique<'ctx> {
        UniqueI16NUnique {
            imp: self.imp.get_unique_constraint::<i16>("n", |row| &row.n),
            phantom: std::marker::PhantomData,
        }
    }
}

impl<'ctx> UniqueI16NUnique<'ctx> {
    pub fn find(&self, col_val: &i16) -> Option<UniqueI16> {
        self.imp.find(col_val)
    }
}
