// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused)]
use spacetimedb_sdk::{
    self as __sdk,
    anyhow::{self as __anyhow, Context as _},
    lib as __lib, sats as __sats, ws_messages as __ws,
};

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub struct InsertVecU256 {
    pub n: Vec<__sats::u256>,
}

impl __sdk::spacetime_module::InModule for InsertVecU256 {
    type Module = super::RemoteModule;
}

pub struct InsertVecU256CallbackId(__sdk::callbacks::CallbackId);

#[allow(non_camel_case_types)]
pub trait insert_vec_u_256 {
    fn insert_vec_u_256(&self, n: Vec<__sats::u256>) -> __anyhow::Result<()>;
    fn on_insert_vec_u_256(
        &self,
        callback: impl FnMut(&super::EventContext, &Vec<__sats::u256>) + Send + 'static,
    ) -> InsertVecU256CallbackId;
    fn remove_on_insert_vec_u_256(&self, callback: InsertVecU256CallbackId);
}

impl insert_vec_u_256 for super::RemoteReducers {
    fn insert_vec_u_256(&self, n: Vec<__sats::u256>) -> __anyhow::Result<()> {
        self.imp.call_reducer("insert_vec_u256", InsertVecU256 { n })
    }
    fn on_insert_vec_u_256(
        &self,
        mut callback: impl FnMut(&super::EventContext, &Vec<__sats::u256>) + Send + 'static,
    ) -> InsertVecU256CallbackId {
        InsertVecU256CallbackId(self.imp.on_reducer::<InsertVecU256>(
            "insert_vec_u256",
            Box::new(move |ctx: &super::EventContext, args: &InsertVecU256| callback(ctx, &args.n)),
        ))
    }
    fn remove_on_insert_vec_u_256(&self, callback: InsertVecU256CallbackId) {
        self.imp
            .remove_on_reducer::<InsertVecU256>("insert_vec_u256", callback.0)
    }
}
