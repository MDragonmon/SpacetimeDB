// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused)]
use spacetimedb_sdk::{
    self as __sdk,
    anyhow::{self as __anyhow, Context as _},
    lib as __lib, sats as __sats, ws_messages as __ws,
};

use super::simple_enum_type::SimpleEnum;

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub struct InsertVecSimpleEnum {
    pub e: Vec<SimpleEnum>,
}

impl __sdk::spacetime_module::InModule for InsertVecSimpleEnum {
    type Module = super::RemoteModule;
}

pub struct InsertVecSimpleEnumCallbackId(__sdk::callbacks::CallbackId);

#[allow(non_camel_case_types)]
pub trait insert_vec_simple_enum {
    fn insert_vec_simple_enum(&self, e: Vec<SimpleEnum>) -> __anyhow::Result<()>;
    fn on_insert_vec_simple_enum(
        &self,
        callback: impl FnMut(&super::EventContext, &Vec<SimpleEnum>) + Send + 'static,
    ) -> InsertVecSimpleEnumCallbackId;
    fn remove_on_insert_vec_simple_enum(&self, callback: InsertVecSimpleEnumCallbackId);
}

impl insert_vec_simple_enum for super::RemoteReducers {
    fn insert_vec_simple_enum(&self, e: Vec<SimpleEnum>) -> __anyhow::Result<()> {
        self.imp
            .call_reducer("insert_vec_simple_enum", InsertVecSimpleEnum { e })
    }
    fn on_insert_vec_simple_enum(
        &self,
        mut callback: impl FnMut(&super::EventContext, &Vec<SimpleEnum>) + Send + 'static,
    ) -> InsertVecSimpleEnumCallbackId {
        InsertVecSimpleEnumCallbackId(self.imp.on_reducer::<InsertVecSimpleEnum>(
            "insert_vec_simple_enum",
            Box::new(move |ctx: &super::EventContext, args: &InsertVecSimpleEnum| callback(ctx, &args.e)),
        ))
    }
    fn remove_on_insert_vec_simple_enum(&self, callback: InsertVecSimpleEnumCallbackId) {
        self.imp
            .remove_on_reducer::<InsertVecSimpleEnum>("insert_vec_simple_enum", callback.0)
    }
}
