// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused)]
use spacetimedb_sdk::{
    self as __sdk,
    anyhow::{self as __anyhow, Context as _},
    lib as __lib, sats as __sats, ws_messages as __ws,
};

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub struct IdentityDisconnected {}

impl __sdk::spacetime_module::InModule for IdentityDisconnected {
    type Module = super::RemoteModule;
}

pub struct IdentityDisconnectedCallbackId(__sdk::callbacks::CallbackId);

#[allow(non_camel_case_types)]
pub trait identity_disconnected {
    fn identity_disconnected(&self) -> __anyhow::Result<()>;
    fn on_identity_disconnected(
        &self,
        callback: impl FnMut(&super::EventContext) + Send + 'static,
    ) -> IdentityDisconnectedCallbackId;
    fn remove_on_identity_disconnected(&self, callback: IdentityDisconnectedCallbackId);
}

impl identity_disconnected for super::RemoteReducers {
    fn identity_disconnected(&self) -> __anyhow::Result<()> {
        self.imp
            .call_reducer("__identity_disconnected__", IdentityDisconnected {})
    }
    fn on_identity_disconnected(
        &self,
        mut callback: impl FnMut(&super::EventContext) + Send + 'static,
    ) -> IdentityDisconnectedCallbackId {
        IdentityDisconnectedCallbackId(self.imp.on_reducer::<IdentityDisconnected>(
            "__identity_disconnected__",
            Box::new(move |ctx: &super::EventContext, args: &IdentityDisconnected| callback(ctx)),
        ))
    }
    fn remove_on_identity_disconnected(&self, callback: IdentityDisconnectedCallbackId) {
        self.imp
            .remove_on_reducer::<IdentityDisconnected>("__identity_disconnected__", callback.0)
    }
}
