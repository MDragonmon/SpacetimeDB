// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused)]
use spacetimedb_sdk::{
    self as __sdk,
    anyhow::{self as __anyhow, Context as _},
    lib as __lib, sats as __sats, ws_messages as __ws,
};

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub struct SendMessage {
    pub text: String,
}

impl __sdk::spacetime_module::InModule for SendMessage {
    type Module = super::RemoteModule;
}

pub struct SendMessageCallbackId(__sdk::callbacks::CallbackId);

#[allow(non_camel_case_types)]
pub trait send_message {
    fn send_message(&self, text: String) -> __anyhow::Result<()>;
    fn on_send_message(
        &self,
        callback: impl FnMut(&super::EventContext, &String) + Send + 'static,
    ) -> SendMessageCallbackId;
    fn remove_on_send_message(&self, callback: SendMessageCallbackId);
}

impl send_message for super::RemoteReducers {
    fn send_message(&self, text: String) -> __anyhow::Result<()> {
        self.imp.call_reducer("send_message", SendMessage { text })
    }
    fn on_send_message(
        &self,
        mut callback: impl FnMut(&super::EventContext, &String) + Send + 'static,
    ) -> SendMessageCallbackId {
        SendMessageCallbackId(self.imp.on_reducer::<SendMessage>(
            "send_message",
            Box::new(move |ctx: &super::EventContext, args: &SendMessage| callback(ctx, &args.text)),
        ))
    }
    fn remove_on_send_message(&self, callback: SendMessageCallbackId) {
        self.imp.remove_on_reducer::<SendMessage>("send_message", callback.0)
    }
}
