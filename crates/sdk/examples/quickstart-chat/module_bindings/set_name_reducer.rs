// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused)]
use spacetimedb_sdk::{
    self as __sdk,
    anyhow::{self as __anyhow, Context as _},
    lib as __lib, sats as __sats, ws_messages as __ws,
};

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub struct SetName {
    pub name: String,
}

impl __sdk::spacetime_module::InModule for SetName {
    type Module = super::RemoteModule;
}

pub struct SetNameCallbackId(__sdk::callbacks::CallbackId);

#[allow(non_camel_case_types)]
pub trait set_name {
    fn set_name(&self, name: String) -> __anyhow::Result<()>;
    fn on_set_name(&self, callback: impl FnMut(&super::EventContext, &String) + Send + 'static) -> SetNameCallbackId;
    fn remove_on_set_name(&self, callback: SetNameCallbackId);
}

impl set_name for super::RemoteReducers {
    fn set_name(&self, name: String) -> __anyhow::Result<()> {
        self.imp.call_reducer("set_name", SetName { name })
    }
    fn on_set_name(
        &self,
        mut callback: impl FnMut(&super::EventContext, &String) + Send + 'static,
    ) -> SetNameCallbackId {
        SetNameCallbackId(self.imp.on_reducer::<SetName>(
            "set_name",
            Box::new(move |ctx: &super::EventContext, args: &SetName| callback(ctx, &args.name)),
        ))
    }
    fn remove_on_set_name(&self, callback: SetNameCallbackId) {
        self.imp.remove_on_reducer::<SetName>("set_name", callback.0)
    }
}
