// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused)]
use spacetimedb_sdk::{
    self as __sdk,
    anyhow::{self as __anyhow, Context as _},
    lib as __lib, sats as __sats, ws_messages as __ws,
};

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub struct IdentityConnected {}

impl __sdk::spacetime_module::InModule for IdentityConnected {
    type Module = super::RemoteModule;
}

pub struct IdentityConnectedCallbackId(__sdk::callbacks::CallbackId);

#[allow(non_camel_case_types)]
pub trait identity_connected {
    fn identity_connected(&self) -> __anyhow::Result<()>;
    fn on_identity_connected(
        &self,
        callback: impl FnMut(&super::EventContext) + Send + 'static,
    ) -> IdentityConnectedCallbackId;
    fn remove_on_identity_connected(&self, callback: IdentityConnectedCallbackId);
}

impl identity_connected for super::RemoteReducers {
    fn identity_connected(&self) -> __anyhow::Result<()> {
        self.imp.call_reducer("__identity_connected__", IdentityConnected {})
    }
    fn on_identity_connected(
        &self,
        mut callback: impl FnMut(&super::EventContext) + Send + 'static,
    ) -> IdentityConnectedCallbackId {
        IdentityConnectedCallbackId(self.imp.on_reducer::<IdentityConnected>(
            "__identity_connected__",
            Box::new(move |ctx: &super::EventContext, args: &IdentityConnected| callback(ctx)),
        ))
    }
    fn remove_on_identity_connected(&self, callback: IdentityConnectedCallbackId) {
        self.imp
            .remove_on_reducer::<IdentityConnected>("__identity_connected__", callback.0)
    }
}
