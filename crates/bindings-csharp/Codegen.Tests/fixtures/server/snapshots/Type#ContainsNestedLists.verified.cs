//HintName: ContainsNestedLists.cs
// <auto-generated />
#nullable enable

partial class ContainsNestedLists
    : System.IEquatable<ContainsNestedLists>,
        SpacetimeDB.BSATN.IStructuralReadWrite
{
    public void ReadFields(System.IO.BinaryReader reader)
    {
        IntList = BSATN.IntList.Read(reader);
        StringList = BSATN.StringList.Read(reader);
        IntArray = BSATN.IntArray.Read(reader);
        StringArray = BSATN.StringArray.Read(reader);
        IntArrayArrayList = BSATN.IntArrayArrayList.Read(reader);
        IntListListArray = BSATN.IntListListArray.Read(reader);
        StringArrayArrayList = BSATN.StringArrayArrayList.Read(reader);
        StringListListArray = BSATN.StringListListArray.Read(reader);
    }

    public void WriteFields(System.IO.BinaryWriter writer)
    {
        BSATN.IntList.Write(writer, IntList);
        BSATN.StringList.Write(writer, StringList);
        BSATN.IntArray.Write(writer, IntArray);
        BSATN.StringArray.Write(writer, StringArray);
        BSATN.IntArrayArrayList.Write(writer, IntArrayArrayList);
        BSATN.IntListListArray.Write(writer, IntListListArray);
        BSATN.StringArrayArrayList.Write(writer, StringArrayArrayList);
        BSATN.StringListListArray.Write(writer, StringListListArray);
    }

    public override string ToString() =>
        $"ContainsNestedLists {{ IntList = {SpacetimeDB.BSATN.StringUtil.GenericToString(IntList)}, StringList = {SpacetimeDB.BSATN.StringUtil.GenericToString(StringList)}, IntArray = {SpacetimeDB.BSATN.StringUtil.GenericToString(IntArray)}, StringArray = {SpacetimeDB.BSATN.StringUtil.GenericToString(StringArray)}, IntArrayArrayList = {SpacetimeDB.BSATN.StringUtil.GenericToString(IntArrayArrayList)}, IntListListArray = {SpacetimeDB.BSATN.StringUtil.GenericToString(IntListListArray)}, StringArrayArrayList = {SpacetimeDB.BSATN.StringUtil.GenericToString(StringArrayArrayList)}, StringListListArray = {SpacetimeDB.BSATN.StringUtil.GenericToString(StringListListArray)} }}";

    public readonly partial struct BSATN : SpacetimeDB.BSATN.IReadWrite<ContainsNestedLists>
    {
        internal static readonly SpacetimeDB.BSATN.List<int, SpacetimeDB.BSATN.I32> IntList = new();
        internal static readonly SpacetimeDB.BSATN.List<
            string,
            SpacetimeDB.BSATN.String
        > StringList = new();
        internal static readonly SpacetimeDB.BSATN.Array<int, SpacetimeDB.BSATN.I32> IntArray =
            new();
        internal static readonly SpacetimeDB.BSATN.Array<
            string,
            SpacetimeDB.BSATN.String
        > StringArray = new();
        internal static readonly SpacetimeDB.BSATN.List<
            int[][],
            SpacetimeDB.BSATN.Array<int[], SpacetimeDB.BSATN.Array<int, SpacetimeDB.BSATN.I32>>
        > IntArrayArrayList = new();
        internal static readonly SpacetimeDB.BSATN.Array<
            System.Collections.Generic.List<System.Collections.Generic.List<int>>,
            SpacetimeDB.BSATN.List<
                System.Collections.Generic.List<int>,
                SpacetimeDB.BSATN.List<int, SpacetimeDB.BSATN.I32>
            >
        > IntListListArray = new();
        internal static readonly SpacetimeDB.BSATN.List<
            string[][],
            SpacetimeDB.BSATN.Array<
                string[],
                SpacetimeDB.BSATN.Array<string, SpacetimeDB.BSATN.String>
            >
        > StringArrayArrayList = new();
        internal static readonly SpacetimeDB.BSATN.Array<
            System.Collections.Generic.List<System.Collections.Generic.List<string>>,
            SpacetimeDB.BSATN.List<
                System.Collections.Generic.List<string>,
                SpacetimeDB.BSATN.List<string, SpacetimeDB.BSATN.String>
            >
        > StringListListArray = new();

        public ContainsNestedLists Read(System.IO.BinaryReader reader) =>
            SpacetimeDB.BSATN.IStructuralReadWrite.Read<ContainsNestedLists>(reader);

        public void Write(System.IO.BinaryWriter writer, ContainsNestedLists value)
        {
            value.WriteFields(writer);
        }

        public SpacetimeDB.BSATN.AlgebraicType.Ref GetAlgebraicType(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) =>
            registrar.RegisterType<ContainsNestedLists>(
                _ => new SpacetimeDB.BSATN.AlgebraicType.Product(
                    new SpacetimeDB.BSATN.AggregateElement[]
                    {
                        new(nameof(IntList), IntList.GetAlgebraicType(registrar)),
                        new(nameof(StringList), StringList.GetAlgebraicType(registrar)),
                        new(nameof(IntArray), IntArray.GetAlgebraicType(registrar)),
                        new(nameof(StringArray), StringArray.GetAlgebraicType(registrar)),
                        new(
                            nameof(IntArrayArrayList),
                            IntArrayArrayList.GetAlgebraicType(registrar)
                        ),
                        new(nameof(IntListListArray), IntListListArray.GetAlgebraicType(registrar)),
                        new(
                            nameof(StringArrayArrayList),
                            StringArrayArrayList.GetAlgebraicType(registrar)
                        ),
                        new(
                            nameof(StringListListArray),
                            StringListListArray.GetAlgebraicType(registrar)
                        )
                    }
                )
            );

        SpacetimeDB.BSATN.AlgebraicType SpacetimeDB.BSATN.IReadWrite<ContainsNestedLists>.GetAlgebraicType(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) => GetAlgebraicType(registrar);
    }

    public override int GetHashCode()
    {
        var hashIntList = 0;
        if (IntList != null)
        {
            var hc0 = new System.HashCode();
            for (int i0 = 0; i0 < IntList.Count; i0++)
            {
                var tmp0 = IntList[i0];
                var out1 = tmp0.GetHashCode();
                hc0.Add(out1);
            }
            hashIntList = hc0.ToHashCode();
        }
        var hashStringList = 0;
        if (StringList != null)
        {
            var hc0 = new System.HashCode();
            for (int i0 = 0; i0 < StringList.Count; i0++)
            {
                var tmp0 = StringList[i0];
                var out1 = tmp0 == null ? 0 : tmp0.GetHashCode();
                hc0.Add(out1);
            }
            hashStringList = hc0.ToHashCode();
        }
        var hashIntArray = 0;
        if (IntArray != null)
        {
            var hc0 = new System.HashCode();
            for (int i0 = 0; i0 < IntArray.Length; i0++)
            {
                var out1 = IntArray[i0].GetHashCode();
                hc0.Add(out1);
            }
            hashIntArray = hc0.ToHashCode();
        }
        var hashStringArray = 0;
        if (StringArray != null)
        {
            var hc0 = new System.HashCode();
            for (int i0 = 0; i0 < StringArray.Length; i0++)
            {
                var out1 = StringArray[i0] == null ? 0 : StringArray[i0].GetHashCode();
                hc0.Add(out1);
            }
            hashStringArray = hc0.ToHashCode();
        }
        var hashIntArrayArrayList = 0;
        if (IntArrayArrayList != null)
        {
            var hc0 = new System.HashCode();
            for (int i0 = 0; i0 < IntArrayArrayList.Count; i0++)
            {
                var tmp0 = IntArrayArrayList[i0];
                var out1 = 0;
                if (tmp0 != null)
                {
                    var hc1 = new System.HashCode();
                    for (int i1 = 0; i1 < tmp0.Length; i1++)
                    {
                        var out2 = 0;
                        if (tmp0[i1] != null)
                        {
                            var hc2 = new System.HashCode();
                            for (int i2 = 0; i2 < tmp0[i1].Length; i2++)
                            {
                                var out3 = tmp0[i1][i2].GetHashCode();
                                hc2.Add(out3);
                            }
                            out2 = hc2.ToHashCode();
                        }
                        hc1.Add(out2);
                    }
                    out1 = hc1.ToHashCode();
                }
                hc0.Add(out1);
            }
            hashIntArrayArrayList = hc0.ToHashCode();
        }
        var hashIntListListArray = 0;
        if (IntListListArray != null)
        {
            var hc0 = new System.HashCode();
            for (int i0 = 0; i0 < IntListListArray.Length; i0++)
            {
                var out1 = 0;
                if (IntListListArray[i0] != null)
                {
                    var hc1 = new System.HashCode();
                    for (int i1 = 0; i1 < IntListListArray[i0].Count; i1++)
                    {
                        var tmp1 = IntListListArray[i0][i1];
                        var out2 = 0;
                        if (tmp1 != null)
                        {
                            var hc2 = new System.HashCode();
                            for (int i2 = 0; i2 < tmp1.Count; i2++)
                            {
                                var tmp2 = tmp1[i2];
                                var out3 = tmp2.GetHashCode();
                                hc2.Add(out3);
                            }
                            out2 = hc2.ToHashCode();
                        }
                        hc1.Add(out2);
                    }
                    out1 = hc1.ToHashCode();
                }
                hc0.Add(out1);
            }
            hashIntListListArray = hc0.ToHashCode();
        }
        var hashStringArrayArrayList = 0;
        if (StringArrayArrayList != null)
        {
            var hc0 = new System.HashCode();
            for (int i0 = 0; i0 < StringArrayArrayList.Count; i0++)
            {
                var tmp0 = StringArrayArrayList[i0];
                var out1 = 0;
                if (tmp0 != null)
                {
                    var hc1 = new System.HashCode();
                    for (int i1 = 0; i1 < tmp0.Length; i1++)
                    {
                        var out2 = 0;
                        if (tmp0[i1] != null)
                        {
                            var hc2 = new System.HashCode();
                            for (int i2 = 0; i2 < tmp0[i1].Length; i2++)
                            {
                                var out3 = tmp0[i1][i2] == null ? 0 : tmp0[i1][i2].GetHashCode();
                                hc2.Add(out3);
                            }
                            out2 = hc2.ToHashCode();
                        }
                        hc1.Add(out2);
                    }
                    out1 = hc1.ToHashCode();
                }
                hc0.Add(out1);
            }
            hashStringArrayArrayList = hc0.ToHashCode();
        }
        var hashStringListListArray = 0;
        if (StringListListArray != null)
        {
            var hc0 = new System.HashCode();
            for (int i0 = 0; i0 < StringListListArray.Length; i0++)
            {
                var out1 = 0;
                if (StringListListArray[i0] != null)
                {
                    var hc1 = new System.HashCode();
                    for (int i1 = 0; i1 < StringListListArray[i0].Count; i1++)
                    {
                        var tmp1 = StringListListArray[i0][i1];
                        var out2 = 0;
                        if (tmp1 != null)
                        {
                            var hc2 = new System.HashCode();
                            for (int i2 = 0; i2 < tmp1.Count; i2++)
                            {
                                var tmp2 = tmp1[i2];
                                var out3 = tmp2 == null ? 0 : tmp2.GetHashCode();
                                hc2.Add(out3);
                            }
                            out2 = hc2.ToHashCode();
                        }
                        hc1.Add(out2);
                    }
                    out1 = hc1.ToHashCode();
                }
                hc0.Add(out1);
            }
            hashStringListListArray = hc0.ToHashCode();
        }
        return hashIntList
            ^ hashStringList
            ^ hashIntArray
            ^ hashStringArray
            ^ hashIntArrayArrayList
            ^ hashIntListListArray
            ^ hashStringArrayArrayList
            ^ hashStringListListArray;
    }

#nullable enable
    public bool Equals(ContainsNestedLists? that)
    {
        if (((object?)that) == null)
        {
            return false;
        }

        var eqIntList = true;
        if (this.IntList == null || that.IntList == null)
        {
            eqIntList = this.IntList == that.IntList;
        }
        else if (this.IntList.Count != that.IntList.Count)
        {
            eqIntList = false;
        }
        else
        {
            for (int i0 = 0; i0 < this.IntList.Count; i0++)
            {
                var tmpA0 = this.IntList[i0];
                var tmpB0 = that.IntList[i0];
                var out1 = tmpA0.Equals(tmpB0);
                if (!out1)
                {
                    eqIntList = false;
                    break;
                }
            }
        }
        var eqStringList = true;
        if (this.StringList == null || that.StringList == null)
        {
            eqStringList = this.StringList == that.StringList;
        }
        else if (this.StringList.Count != that.StringList.Count)
        {
            eqStringList = false;
        }
        else
        {
            for (int i0 = 0; i0 < this.StringList.Count; i0++)
            {
                var tmpA0 = this.StringList[i0];
                var tmpB0 = that.StringList[i0];
                var out1 = tmpA0 == null ? tmpB0 == null : tmpA0.Equals(tmpB0);
                if (!out1)
                {
                    eqStringList = false;
                    break;
                }
            }
        }
        var eqIntArray = true;
        if (this.IntArray == null || that.IntArray == null)
        {
            eqIntArray = this.IntArray == that.IntArray;
        }
        else if (this.IntArray.Length != that.IntArray.Length)
        {
            eqIntArray = false;
        }
        else
        {
            for (int i0 = 0; i0 < this.IntArray.Length; i0++)
            {
                var out1 = this.IntArray[i0].Equals(that.IntArray[i0]);
                if (!out1)
                {
                    eqIntArray = false;
                    break;
                }
            }
        }
        var eqStringArray = true;
        if (this.StringArray == null || that.StringArray == null)
        {
            eqStringArray = this.StringArray == that.StringArray;
        }
        else if (this.StringArray.Length != that.StringArray.Length)
        {
            eqStringArray = false;
        }
        else
        {
            for (int i0 = 0; i0 < this.StringArray.Length; i0++)
            {
                var out1 =
                    this.StringArray[i0] == null
                        ? that.StringArray[i0] == null
                        : this.StringArray[i0].Equals(that.StringArray[i0]);
                if (!out1)
                {
                    eqStringArray = false;
                    break;
                }
            }
        }
        var eqIntArrayArrayList = true;
        if (this.IntArrayArrayList == null || that.IntArrayArrayList == null)
        {
            eqIntArrayArrayList = this.IntArrayArrayList == that.IntArrayArrayList;
        }
        else if (this.IntArrayArrayList.Count != that.IntArrayArrayList.Count)
        {
            eqIntArrayArrayList = false;
        }
        else
        {
            for (int i0 = 0; i0 < this.IntArrayArrayList.Count; i0++)
            {
                var tmpA0 = this.IntArrayArrayList[i0];
                var tmpB0 = that.IntArrayArrayList[i0];
                var out1 = true;
                if (tmpA0 == null || tmpB0 == null)
                {
                    out1 = tmpA0 == tmpB0;
                }
                else if (tmpA0.Length != tmpB0.Length)
                {
                    out1 = false;
                }
                else
                {
                    for (int i1 = 0; i1 < tmpA0.Length; i1++)
                    {
                        var out2 = true;
                        if (tmpA0[i1] == null || tmpB0[i1] == null)
                        {
                            out2 = tmpA0[i1] == tmpB0[i1];
                        }
                        else if (tmpA0[i1].Length != tmpB0[i1].Length)
                        {
                            out2 = false;
                        }
                        else
                        {
                            for (int i2 = 0; i2 < tmpA0[i1].Length; i2++)
                            {
                                var out3 = tmpA0[i1][i2].Equals(tmpB0[i1][i2]);
                                if (!out3)
                                {
                                    out2 = false;
                                    break;
                                }
                            }
                        }
                        if (!out2)
                        {
                            out1 = false;
                            break;
                        }
                    }
                }
                if (!out1)
                {
                    eqIntArrayArrayList = false;
                    break;
                }
            }
        }
        var eqIntListListArray = true;
        if (this.IntListListArray == null || that.IntListListArray == null)
        {
            eqIntListListArray = this.IntListListArray == that.IntListListArray;
        }
        else if (this.IntListListArray.Length != that.IntListListArray.Length)
        {
            eqIntListListArray = false;
        }
        else
        {
            for (int i0 = 0; i0 < this.IntListListArray.Length; i0++)
            {
                var out1 = true;
                if (this.IntListListArray[i0] == null || that.IntListListArray[i0] == null)
                {
                    out1 = this.IntListListArray[i0] == that.IntListListArray[i0];
                }
                else if (this.IntListListArray[i0].Count != that.IntListListArray[i0].Count)
                {
                    out1 = false;
                }
                else
                {
                    for (int i1 = 0; i1 < this.IntListListArray[i0].Count; i1++)
                    {
                        var tmpA1 = this.IntListListArray[i0][i1];
                        var tmpB1 = that.IntListListArray[i0][i1];
                        var out2 = true;
                        if (tmpA1 == null || tmpB1 == null)
                        {
                            out2 = tmpA1 == tmpB1;
                        }
                        else if (tmpA1.Count != tmpB1.Count)
                        {
                            out2 = false;
                        }
                        else
                        {
                            for (int i2 = 0; i2 < tmpA1.Count; i2++)
                            {
                                var tmpA2 = tmpA1[i2];
                                var tmpB2 = tmpB1[i2];
                                var out3 = tmpA2.Equals(tmpB2);
                                if (!out3)
                                {
                                    out2 = false;
                                    break;
                                }
                            }
                        }
                        if (!out2)
                        {
                            out1 = false;
                            break;
                        }
                    }
                }
                if (!out1)
                {
                    eqIntListListArray = false;
                    break;
                }
            }
        }
        var eqStringArrayArrayList = true;
        if (this.StringArrayArrayList == null || that.StringArrayArrayList == null)
        {
            eqStringArrayArrayList = this.StringArrayArrayList == that.StringArrayArrayList;
        }
        else if (this.StringArrayArrayList.Count != that.StringArrayArrayList.Count)
        {
            eqStringArrayArrayList = false;
        }
        else
        {
            for (int i0 = 0; i0 < this.StringArrayArrayList.Count; i0++)
            {
                var tmpA0 = this.StringArrayArrayList[i0];
                var tmpB0 = that.StringArrayArrayList[i0];
                var out1 = true;
                if (tmpA0 == null || tmpB0 == null)
                {
                    out1 = tmpA0 == tmpB0;
                }
                else if (tmpA0.Length != tmpB0.Length)
                {
                    out1 = false;
                }
                else
                {
                    for (int i1 = 0; i1 < tmpA0.Length; i1++)
                    {
                        var out2 = true;
                        if (tmpA0[i1] == null || tmpB0[i1] == null)
                        {
                            out2 = tmpA0[i1] == tmpB0[i1];
                        }
                        else if (tmpA0[i1].Length != tmpB0[i1].Length)
                        {
                            out2 = false;
                        }
                        else
                        {
                            for (int i2 = 0; i2 < tmpA0[i1].Length; i2++)
                            {
                                var out3 =
                                    tmpA0[i1][i2] == null
                                        ? tmpB0[i1][i2] == null
                                        : tmpA0[i1][i2].Equals(tmpB0[i1][i2]);
                                if (!out3)
                                {
                                    out2 = false;
                                    break;
                                }
                            }
                        }
                        if (!out2)
                        {
                            out1 = false;
                            break;
                        }
                    }
                }
                if (!out1)
                {
                    eqStringArrayArrayList = false;
                    break;
                }
            }
        }
        var eqStringListListArray = true;
        if (this.StringListListArray == null || that.StringListListArray == null)
        {
            eqStringListListArray = this.StringListListArray == that.StringListListArray;
        }
        else if (this.StringListListArray.Length != that.StringListListArray.Length)
        {
            eqStringListListArray = false;
        }
        else
        {
            for (int i0 = 0; i0 < this.StringListListArray.Length; i0++)
            {
                var out1 = true;
                if (this.StringListListArray[i0] == null || that.StringListListArray[i0] == null)
                {
                    out1 = this.StringListListArray[i0] == that.StringListListArray[i0];
                }
                else if (this.StringListListArray[i0].Count != that.StringListListArray[i0].Count)
                {
                    out1 = false;
                }
                else
                {
                    for (int i1 = 0; i1 < this.StringListListArray[i0].Count; i1++)
                    {
                        var tmpA1 = this.StringListListArray[i0][i1];
                        var tmpB1 = that.StringListListArray[i0][i1];
                        var out2 = true;
                        if (tmpA1 == null || tmpB1 == null)
                        {
                            out2 = tmpA1 == tmpB1;
                        }
                        else if (tmpA1.Count != tmpB1.Count)
                        {
                            out2 = false;
                        }
                        else
                        {
                            for (int i2 = 0; i2 < tmpA1.Count; i2++)
                            {
                                var tmpA2 = tmpA1[i2];
                                var tmpB2 = tmpB1[i2];
                                var out3 = tmpA2 == null ? tmpB2 == null : tmpA2.Equals(tmpB2);
                                if (!out3)
                                {
                                    out2 = false;
                                    break;
                                }
                            }
                        }
                        if (!out2)
                        {
                            out1 = false;
                            break;
                        }
                    }
                }
                if (!out1)
                {
                    eqStringListListArray = false;
                    break;
                }
            }
        }
        return eqIntList
            && eqStringList
            && eqIntArray
            && eqStringArray
            && eqIntArrayArrayList
            && eqIntListListArray
            && eqStringArrayArrayList
            && eqStringListListArray;
    }

    public override bool Equals(object? that)
    {
        if (that == null)
        {
            return false;
        }
        var that_ = that as ContainsNestedLists;
        if (((object?)that_) == null)
        {
            return false;
        }
        return Equals(that_);
    }

    public static bool operator ==(ContainsNestedLists? this_, ContainsNestedLists? that)
    {
        if (((object?)this_) == null || ((object?)that) == null)
        {
            return object.Equals(this_, that);
        }
        return this_.Equals(that);
    }

    public static bool operator !=(ContainsNestedLists? this_, ContainsNestedLists? that)
    {
        if (((object?)this_) == null || ((object?)that) == null)
        {
            return !object.Equals(this_, that);
        }
        return !this_.Equals(that);
    }
#nullable restore
} // ContainsNestedLists
