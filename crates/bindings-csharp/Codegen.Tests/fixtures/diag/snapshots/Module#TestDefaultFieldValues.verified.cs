//HintName: TestDefaultFieldValues.cs
// <auto-generated />
#nullable enable

partial struct TestDefaultFieldValues
    : System.IEquatable<TestDefaultFieldValues>,
        SpacetimeDB.BSATN.IStructuralReadWrite
{
    public void ReadFields(System.IO.BinaryReader reader)
    {
        UniqueField = BSATN.UniqueFieldRW.Read(reader);
        DefaultString = BSATN.DefaultStringRW.Read(reader);
        DefaultBool = BSATN.DefaultBoolRW.Read(reader);
        DefaultUInt = BSATN.DefaultUIntRW.Read(reader);
        DefaultUInt16 = BSATN.DefaultUInt16RW.Read(reader);
        DefaultUInt64 = BSATN.DefaultUInt64RW.Read(reader);
        DefaultSByte = BSATN.DefaultSByteRW.Read(reader);
        DefaultInt16 = BSATN.DefaultInt16RW.Read(reader);
        DefaultInt32 = BSATN.DefaultInt32RW.Read(reader);
        DefaultInt64 = BSATN.DefaultInt64RW.Read(reader);
        DefaultFloat = BSATN.DefaultFloatRW.Read(reader);
        DefaultDouble = BSATN.DefaultDoubleRW.Read(reader);
        DefaultEnum = BSATN.DefaultEnumRW.Read(reader);
    }

    public void WriteFields(System.IO.BinaryWriter writer)
    {
        BSATN.UniqueFieldRW.Write(writer, UniqueField);
        BSATN.DefaultStringRW.Write(writer, DefaultString);
        BSATN.DefaultBoolRW.Write(writer, DefaultBool);
        BSATN.DefaultUIntRW.Write(writer, DefaultUInt);
        BSATN.DefaultUInt16RW.Write(writer, DefaultUInt16);
        BSATN.DefaultUInt64RW.Write(writer, DefaultUInt64);
        BSATN.DefaultSByteRW.Write(writer, DefaultSByte);
        BSATN.DefaultInt16RW.Write(writer, DefaultInt16);
        BSATN.DefaultInt32RW.Write(writer, DefaultInt32);
        BSATN.DefaultInt64RW.Write(writer, DefaultInt64);
        BSATN.DefaultFloatRW.Write(writer, DefaultFloat);
        BSATN.DefaultDoubleRW.Write(writer, DefaultDouble);
        BSATN.DefaultEnumRW.Write(writer, DefaultEnum);
    }

    object SpacetimeDB.BSATN.IStructuralReadWrite.GetSerializer()
    {
        return new BSATN();
    }

    public override string ToString() =>
        $"TestDefaultFieldValues {{ UniqueField = {SpacetimeDB.BSATN.StringUtil.GenericToString(UniqueField)}, DefaultString = {SpacetimeDB.BSATN.StringUtil.GenericToString(DefaultString)}, DefaultBool = {SpacetimeDB.BSATN.StringUtil.GenericToString(DefaultBool)}, DefaultUInt = {SpacetimeDB.BSATN.StringUtil.GenericToString(DefaultUInt)}, DefaultUInt16 = {SpacetimeDB.BSATN.StringUtil.GenericToString(DefaultUInt16)}, DefaultUInt64 = {SpacetimeDB.BSATN.StringUtil.GenericToString(DefaultUInt64)}, DefaultSByte = {SpacetimeDB.BSATN.StringUtil.GenericToString(DefaultSByte)}, DefaultInt16 = {SpacetimeDB.BSATN.StringUtil.GenericToString(DefaultInt16)}, DefaultInt32 = {SpacetimeDB.BSATN.StringUtil.GenericToString(DefaultInt32)}, DefaultInt64 = {SpacetimeDB.BSATN.StringUtil.GenericToString(DefaultInt64)}, DefaultFloat = {SpacetimeDB.BSATN.StringUtil.GenericToString(DefaultFloat)}, DefaultDouble = {SpacetimeDB.BSATN.StringUtil.GenericToString(DefaultDouble)}, DefaultEnum = {SpacetimeDB.BSATN.StringUtil.GenericToString(DefaultEnum)} }}";

    public readonly partial struct BSATN : SpacetimeDB.BSATN.IReadWrite<TestDefaultFieldValues>
    {
        internal static readonly SpacetimeDB.BSATN.ValueOption<
            int,
            SpacetimeDB.BSATN.I32
        > UniqueFieldRW = new();
        internal static readonly SpacetimeDB.BSATN.String DefaultStringRW = new();
        internal static readonly SpacetimeDB.BSATN.Bool DefaultBoolRW = new();
        internal static readonly SpacetimeDB.BSATN.U32 DefaultUIntRW = new();
        internal static readonly SpacetimeDB.BSATN.U16 DefaultUInt16RW = new();
        internal static readonly SpacetimeDB.BSATN.U64 DefaultUInt64RW = new();
        internal static readonly SpacetimeDB.BSATN.I8 DefaultSByteRW = new();
        internal static readonly SpacetimeDB.BSATN.I16 DefaultInt16RW = new();
        internal static readonly SpacetimeDB.BSATN.I32 DefaultInt32RW = new();
        internal static readonly SpacetimeDB.BSATN.I64 DefaultInt64RW = new();
        internal static readonly SpacetimeDB.BSATN.F32 DefaultFloatRW = new();
        internal static readonly SpacetimeDB.BSATN.F64 DefaultDoubleRW = new();
        internal static readonly SpacetimeDB.BSATN.Enum<MyEnum> DefaultEnumRW = new();

        public TestDefaultFieldValues Read(System.IO.BinaryReader reader)
        {
            var ___result = new TestDefaultFieldValues();
            ___result.ReadFields(reader);
            return ___result;
        }

        public void Write(System.IO.BinaryWriter writer, TestDefaultFieldValues value)
        {
            value.WriteFields(writer);
        }

        public SpacetimeDB.BSATN.AlgebraicType.Ref GetAlgebraicType(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) =>
            registrar.RegisterType<TestDefaultFieldValues>(
                _ => new SpacetimeDB.BSATN.AlgebraicType.Product(
                    new SpacetimeDB.BSATN.AggregateElement[]
                    {
                        new("UniqueField", UniqueFieldRW.GetAlgebraicType(registrar)),
                        new("DefaultString", DefaultStringRW.GetAlgebraicType(registrar)),
                        new("DefaultBool", DefaultBoolRW.GetAlgebraicType(registrar)),
                        new("DefaultUInt", DefaultUIntRW.GetAlgebraicType(registrar)),
                        new("DefaultUInt16", DefaultUInt16RW.GetAlgebraicType(registrar)),
                        new("DefaultUInt64", DefaultUInt64RW.GetAlgebraicType(registrar)),
                        new("DefaultSByte", DefaultSByteRW.GetAlgebraicType(registrar)),
                        new("DefaultInt16", DefaultInt16RW.GetAlgebraicType(registrar)),
                        new("DefaultInt32", DefaultInt32RW.GetAlgebraicType(registrar)),
                        new("DefaultInt64", DefaultInt64RW.GetAlgebraicType(registrar)),
                        new("DefaultFloat", DefaultFloatRW.GetAlgebraicType(registrar)),
                        new("DefaultDouble", DefaultDoubleRW.GetAlgebraicType(registrar)),
                        new("DefaultEnum", DefaultEnumRW.GetAlgebraicType(registrar))
                    }
                )
            );

        SpacetimeDB.BSATN.AlgebraicType SpacetimeDB.BSATN.IReadWrite<TestDefaultFieldValues>.GetAlgebraicType(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) => GetAlgebraicType(registrar);
    }

    public override int GetHashCode()
    {
        var ___hashUniqueField = UniqueField.GetHashCode();
        var ___hashDefaultString = DefaultString == null ? 0 : DefaultString.GetHashCode();
        var ___hashDefaultBool = DefaultBool.GetHashCode();
        var ___hashDefaultUInt = DefaultUInt.GetHashCode();
        var ___hashDefaultUInt16 = DefaultUInt16.GetHashCode();
        var ___hashDefaultUInt64 = DefaultUInt64.GetHashCode();
        var ___hashDefaultSByte = DefaultSByte.GetHashCode();
        var ___hashDefaultInt16 = DefaultInt16.GetHashCode();
        var ___hashDefaultInt32 = DefaultInt32.GetHashCode();
        var ___hashDefaultInt64 = DefaultInt64.GetHashCode();
        var ___hashDefaultFloat = DefaultFloat.GetHashCode();
        var ___hashDefaultDouble = DefaultDouble.GetHashCode();
        var ___hashDefaultEnum = DefaultEnum.GetHashCode();
        return ___hashUniqueField
            ^ ___hashDefaultString
            ^ ___hashDefaultBool
            ^ ___hashDefaultUInt
            ^ ___hashDefaultUInt16
            ^ ___hashDefaultUInt64
            ^ ___hashDefaultSByte
            ^ ___hashDefaultInt16
            ^ ___hashDefaultInt32
            ^ ___hashDefaultInt64
            ^ ___hashDefaultFloat
            ^ ___hashDefaultDouble
            ^ ___hashDefaultEnum;
    }

#nullable enable
    public bool Equals(TestDefaultFieldValues that)
    {
        var ___eqUniqueField = this.UniqueField.Equals(that.UniqueField);
        var ___eqDefaultString =
            this.DefaultString == null
                ? that.DefaultString == null
                : this.DefaultString.Equals(that.DefaultString);
        var ___eqDefaultBool = this.DefaultBool.Equals(that.DefaultBool);
        var ___eqDefaultUInt = this.DefaultUInt.Equals(that.DefaultUInt);
        var ___eqDefaultUInt16 = this.DefaultUInt16.Equals(that.DefaultUInt16);
        var ___eqDefaultUInt64 = this.DefaultUInt64.Equals(that.DefaultUInt64);
        var ___eqDefaultSByte = this.DefaultSByte.Equals(that.DefaultSByte);
        var ___eqDefaultInt16 = this.DefaultInt16.Equals(that.DefaultInt16);
        var ___eqDefaultInt32 = this.DefaultInt32.Equals(that.DefaultInt32);
        var ___eqDefaultInt64 = this.DefaultInt64.Equals(that.DefaultInt64);
        var ___eqDefaultFloat = this.DefaultFloat.Equals(that.DefaultFloat);
        var ___eqDefaultDouble = this.DefaultDouble.Equals(that.DefaultDouble);
        var ___eqDefaultEnum = this.DefaultEnum == that.DefaultEnum;
        return ___eqUniqueField
            && ___eqDefaultString
            && ___eqDefaultBool
            && ___eqDefaultUInt
            && ___eqDefaultUInt16
            && ___eqDefaultUInt64
            && ___eqDefaultSByte
            && ___eqDefaultInt16
            && ___eqDefaultInt32
            && ___eqDefaultInt64
            && ___eqDefaultFloat
            && ___eqDefaultDouble
            && ___eqDefaultEnum;
    }

    public override bool Equals(object? that)
    {
        if (that == null)
        {
            return false;
        }
        var that_ = that as TestDefaultFieldValues?;
        if (((object?)that_) == null)
        {
            return false;
        }
        return Equals(that_);
    }

    public static bool operator ==(TestDefaultFieldValues this_, TestDefaultFieldValues that)
    {
        if (((object?)this_) == null || ((object?)that) == null)
        {
            return object.Equals(this_, that);
        }
        return this_.Equals(that);
    }

    public static bool operator !=(TestDefaultFieldValues this_, TestDefaultFieldValues that)
    {
        if (((object?)this_) == null || ((object?)that) == null)
        {
            return !object.Equals(this_, that);
        }
        return !this_.Equals(that);
    }
#nullable restore
} // TestDefaultFieldValues
