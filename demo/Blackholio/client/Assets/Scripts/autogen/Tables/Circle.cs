// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// <auto-generated />

#nullable enable

using System;
using SpacetimeDB.BSATN;
using SpacetimeDB.ClientApi;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB.Types
{
    public sealed partial class RemoteTables
    {
        public sealed class CircleHandle : RemoteTableHandle<EventContext, Circle>
        {
            public override void InternalInvokeValueInserted(Circle row)
            {
                EntityId.Cache[row.EntityId] = row;
            }

            public override void InternalInvokeValueDeleted(Circle row)
            {
                EntityId.Cache.Remove(row.EntityId);
            }

            public sealed class EntityIdUniqueIndex
            {
                internal readonly Dictionary<uint, Circle> Cache = new(16);

                public Circle? Find(uint value)
                {
                    Cache.TryGetValue(value, out var r);
                    return r;
                }
            }

            public EntityIdUniqueIndex EntityId = new();

            public sealed class PlayerIdIndex
            {
                CircleHandle Handle;
                internal PlayerIdIndex(CircleHandle handle) => Handle = handle;
                public IEnumerable<Circle> Filter(uint value) =>
                    Handle.Query(x => x.PlayerId == value);
            }

            public PlayerIdIndex PlayerId { get; init; }

            internal CircleHandle()
            {
                PlayerId = new(this);
            }

            public override object GetPrimaryKey(Circle row) => row.EntityId;
        }

        public readonly CircleHandle Circle = new();
    }
}
