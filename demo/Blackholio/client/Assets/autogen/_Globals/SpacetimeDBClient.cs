// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.
// <auto-generated />

#nullable enable

using System;
using SpacetimeDB;
using SpacetimeDB.ClientApi;
using System.Collections.Generic;

namespace SpacetimeDB.Types
{
	public sealed class RemoteTables
	{
		public class CircleHandle : RemoteTableHandle<EventContext, Circle>
		{
			private static Dictionary<uint, Circle> EntityId_Index = new(16);

			public override void InternalInvokeValueInserted(IDatabaseRow row)
			{
				var value = (Circle)row;
				EntityId_Index[value.EntityId] = value;
			}

			public override void InternalInvokeValueDeleted(IDatabaseRow row)
			{
				EntityId_Index.Remove(((Circle)row).EntityId);
			}

			public readonly ref struct EntityIdUniqueIndex
			{
				public Circle? Find(uint value)
				{
					EntityId_Index.TryGetValue(value, out var r);
					return r;
				}

			}

			public EntityIdUniqueIndex EntityId => new();

			internal CircleHandle()
			{
			}
			public override object GetPrimaryKey(IDatabaseRow row) => ((Circle)row).EntityId;

		}

		public readonly CircleHandle Circle = new();

		public class ConfigHandle : RemoteTableHandle<EventContext, Config>
		{
			private static Dictionary<uint, Config> Id_Index = new(16);

			public override void InternalInvokeValueInserted(IDatabaseRow row)
			{
				var value = (Config)row;
				Id_Index[value.Id] = value;
			}

			public override void InternalInvokeValueDeleted(IDatabaseRow row)
			{
				Id_Index.Remove(((Config)row).Id);
			}

			public readonly ref struct IdUniqueIndex
			{
				public Config? Find(uint value)
				{
					Id_Index.TryGetValue(value, out var r);
					return r;
				}

			}

			public IdUniqueIndex Id => new();

			internal ConfigHandle()
			{
			}
			public override object GetPrimaryKey(IDatabaseRow row) => ((Config)row).Id;

		}

		public readonly ConfigHandle Config = new();

		public class EntityHandle : RemoteTableHandle<EventContext, Entity>
		{
			private static Dictionary<uint, Entity> Id_Index = new(16);

			public override void InternalInvokeValueInserted(IDatabaseRow row)
			{
				var value = (Entity)row;
				Id_Index[value.Id] = value;
			}

			public override void InternalInvokeValueDeleted(IDatabaseRow row)
			{
				Id_Index.Remove(((Entity)row).Id);
			}

			public readonly ref struct IdUniqueIndex
			{
				public Entity? Find(uint value)
				{
					Id_Index.TryGetValue(value, out var r);
					return r;
				}

			}

			public IdUniqueIndex Id => new();

			internal EntityHandle()
			{
			}
			public override object GetPrimaryKey(IDatabaseRow row) => ((Entity)row).Id;

		}

		public readonly EntityHandle Entity = new();

		public class MoveAllPlayersTimerHandle : RemoteTableHandle<EventContext, MoveAllPlayersTimer>
		{
			private static Dictionary<ulong, MoveAllPlayersTimer> ScheduledId_Index = new(16);

			public override void InternalInvokeValueInserted(IDatabaseRow row)
			{
				var value = (MoveAllPlayersTimer)row;
				ScheduledId_Index[value.ScheduledId] = value;
			}

			public override void InternalInvokeValueDeleted(IDatabaseRow row)
			{
				ScheduledId_Index.Remove(((MoveAllPlayersTimer)row).ScheduledId);
			}

			public readonly ref struct ScheduledIdUniqueIndex
			{
				public MoveAllPlayersTimer? Find(ulong value)
				{
					ScheduledId_Index.TryGetValue(value, out var r);
					return r;
				}

			}

			public ScheduledIdUniqueIndex ScheduledId => new();

			internal MoveAllPlayersTimerHandle()
			{
			}
			public override object GetPrimaryKey(IDatabaseRow row) => ((MoveAllPlayersTimer)row).ScheduledId;

		}

		public readonly MoveAllPlayersTimerHandle MoveAllPlayersTimer = new();

	}

	public sealed class RemoteReducers : RemoteBase<DbConnection>
	{
		internal RemoteReducers(DbConnection conn) : base(conn) {}
		public delegate void MoveAllPlayersHandler(EventContext ctx, SpacetimeDB.Types.MoveAllPlayersTimer timer);
		public event MoveAllPlayersHandler? OnMoveAllPlayers;

		public void MoveAllPlayers(SpacetimeDB.Types.MoveAllPlayersTimer timer)
		{
			conn.InternalCallReducer(new MoveAllPlayers { Timer = timer });
		}

		public bool InvokeMoveAllPlayers(EventContext ctx, MoveAllPlayers args)
		{
			if (OnMoveAllPlayers == null) return false;
			OnMoveAllPlayers(
				ctx,
				args.Timer
			);
			return true;
		}
	}

	public partial record EventContext : DbContext<RemoteTables>, IEventContext
	{
		public readonly RemoteReducers Reducers;
		public readonly Event<Reducer> Event;

		internal EventContext(DbConnection conn, Event<Reducer> reducerEvent) : base(conn.Db)
		{
			Reducers = conn.Reducers;
			Event = reducerEvent;
		}
	}

	[Type]
	public partial record Reducer : TaggedEnum<(
		MoveAllPlayers MoveAllPlayers,
		Unit StdbNone,
		Unit StdbIdentityConnected,
		Unit StdbIdentityDisconnected
	)>;
	public class DbConnection : DbConnectionBase<DbConnection, Reducer>
	{
		public readonly RemoteTables Db = new();
		public readonly RemoteReducers Reducers;

		public DbConnection()
		{
			Reducers = new(this);

			clientDB.AddTable<Circle>("circle", Db.Circle);
			clientDB.AddTable<Config>("config", Db.Config);
			clientDB.AddTable<Entity>("entity", Db.Entity);
			clientDB.AddTable<MoveAllPlayersTimer>("move_all_players_timer", Db.MoveAllPlayersTimer);
		}

		protected override Reducer ToReducer(TransactionUpdate update)
		{
			var encodedArgs = update.ReducerCall.Args;
			return update.ReducerCall.ReducerName switch {
				"move_all_players" => new Reducer.MoveAllPlayers(BSATNHelpers.Decode<MoveAllPlayers>(encodedArgs)),
				"<none>" => new Reducer.StdbNone(default),
				"__identity_connected__" => new Reducer.StdbIdentityConnected(default),
				"__identity_disconnected__" => new Reducer.StdbIdentityDisconnected(default),
				"" => new Reducer.StdbNone(default),
				var reducer => throw new ArgumentOutOfRangeException("Reducer", $"Unknown reducer {reducer}")
			};
		}

		protected override IEventContext ToEventContext(Event<Reducer> reducerEvent) =>
		new EventContext(this, reducerEvent);

		protected override bool Dispatch(IEventContext context, Reducer reducer)
		{
			var eventContext = (EventContext)context;
			return reducer switch {
				Reducer.MoveAllPlayers(var args) => Reducers.InvokeMoveAllPlayers(eventContext, args),
				Reducer.StdbNone or
				Reducer.StdbIdentityConnected or
				Reducer.StdbIdentityDisconnected => true,
				_ => throw new ArgumentOutOfRangeException("Reducer", $"Unknown reducer {reducer}")
			};
		}

		public SubscriptionBuilder<EventContext> SubscriptionBuilder() => new(this);
	}
}
