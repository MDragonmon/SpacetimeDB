// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.
// <auto-generated />

#nullable enable

using System;
using SpacetimeDB;
using SpacetimeDB.ClientApi;
using System.Collections.Generic;

namespace SpacetimeDB.Types
{
	public sealed class RemoteTables
	{
		public class MessageHandle : RemoteTableHandle<EventContext, Message>
		{
			internal MessageHandle()
			{
			}

		}

		public readonly MessageHandle Message = new();

		public class UserHandle : RemoteTableHandle<EventContext, User>
		{
			private static Dictionary<SpacetimeDB.Identity, User> Identity_Index = new(16);

			public override void InternalInvokeValueInserted(IDatabaseRow row)
			{
				var value = (User)row;
				Identity_Index[value.Identity] = value;
			}

			public override void InternalInvokeValueDeleted(IDatabaseRow row)
			{
				Identity_Index.Remove(((User)row).Identity);
			}

			public readonly ref struct IdentityUniqueIndex
			{
				public User? Find(SpacetimeDB.Identity value)
				{
					Identity_Index.TryGetValue(value, out var r);
					return r;
				}

			}

			public IdentityUniqueIndex Identity => new();

			internal UserHandle()
			{
			}
			public override object GetPrimaryKey(IDatabaseRow row) => ((User)row).Identity;

		}

		public readonly UserHandle User = new();

	}

	public sealed class RemoteReducers : RemoteBase<DbConnection>
	{
		internal RemoteReducers(DbConnection conn, SetReducerFlags SetReducerFlags) : base(conn) { this.SetCallReducerFlags = SetReducerFlags; }
		internal readonly SetReducerFlags SetCallReducerFlags;
		public delegate void IdentityConnectedHandler(EventContext ctx);
		public event IdentityConnectedHandler? OnIdentityConnected;

		public void IdentityConnected()
		{
			conn.InternalCallReducer(new IdentityConnected {  }, this.SetCallReducerFlags.IdentityConnectedFlags);
		}

		public bool InvokeIdentityConnected(EventContext ctx, IdentityConnected args)
		{
			if (OnIdentityConnected == null) return false;
			OnIdentityConnected(
				ctx
			);
			return true;
		}
		public delegate void IdentityDisconnectedHandler(EventContext ctx);
		public event IdentityDisconnectedHandler? OnIdentityDisconnected;

		public void IdentityDisconnected()
		{
			conn.InternalCallReducer(new IdentityDisconnected {  }, this.SetCallReducerFlags.IdentityDisconnectedFlags);
		}

		public bool InvokeIdentityDisconnected(EventContext ctx, IdentityDisconnected args)
		{
			if (OnIdentityDisconnected == null) return false;
			OnIdentityDisconnected(
				ctx
			);
			return true;
		}
		public delegate void InitHandler(EventContext ctx);
		public event InitHandler? OnInit;

		public void Init()
		{
			conn.InternalCallReducer(new Init {  }, this.SetCallReducerFlags.InitFlags);
		}

		public bool InvokeInit(EventContext ctx, Init args)
		{
			if (OnInit == null) return false;
			OnInit(
				ctx
			);
			return true;
		}
		public delegate void SendMessageHandler(EventContext ctx, string text);
		public event SendMessageHandler? OnSendMessage;

		public void SendMessage(string text)
		{
			conn.InternalCallReducer(new SendMessage { Text = text }, this.SetCallReducerFlags.SendMessageFlags);
		}

		public bool InvokeSendMessage(EventContext ctx, SendMessage args)
		{
			if (OnSendMessage == null) return false;
			OnSendMessage(
				ctx,
				args.Text
			);
			return true;
		}
		public delegate void SetNameHandler(EventContext ctx, string name);
		public event SetNameHandler? OnSetName;

		public void SetName(string name)
		{
			conn.InternalCallReducer(new SetName { Name = name }, this.SetCallReducerFlags.SetNameFlags);
		}

		public bool InvokeSetName(EventContext ctx, SetName args)
		{
			if (OnSetName == null) return false;
			OnSetName(
				ctx,
				args.Name
			);
			return true;
		}
	}

	public sealed class SetReducerFlags
	{
		internal SetReducerFlags() { }
		internal CallReducerFlags IdentityConnectedFlags;
		public void IdentityConnected(CallReducerFlags flags) { this.IdentityConnectedFlags = flags; }
		internal CallReducerFlags IdentityDisconnectedFlags;
		public void IdentityDisconnected(CallReducerFlags flags) { this.IdentityDisconnectedFlags = flags; }
		internal CallReducerFlags InitFlags;
		public void Init(CallReducerFlags flags) { this.InitFlags = flags; }
		internal CallReducerFlags SendMessageFlags;
		public void SendMessage(CallReducerFlags flags) { this.SendMessageFlags = flags; }
		internal CallReducerFlags SetNameFlags;
		public void SetName(CallReducerFlags flags) { this.SetNameFlags = flags; }
	}

	public partial record EventContext : DbContext<RemoteTables>, IEventContext
	{
		public readonly RemoteReducers Reducers;
		public readonly SetReducerFlags SetReducerFlags;
		public readonly Event<Reducer> Event;

		internal EventContext(DbConnection conn, Event<Reducer> reducerEvent) : base(conn.Db)
		{
			Reducers = conn.Reducers;
			SetReducerFlags = conn.SetReducerFlags;
			Event = reducerEvent;
		}
	}

	[Type]
	public partial record Reducer : TaggedEnum<(
		IdentityConnected IdentityConnected,
		IdentityDisconnected IdentityDisconnected,
		Init Init,
		SendMessage SendMessage,
		SetName SetName,
		Unit StdbNone
	)>;
	public class DbConnection : DbConnectionBase<DbConnection, Reducer>
	{
		public readonly RemoteTables Db = new();
		public readonly RemoteReducers Reducers;
		public readonly SetReducerFlags SetReducerFlags;

		public DbConnection()
		{
			SetReducerFlags = new();
			Reducers = new(this, this.SetReducerFlags);

			clientDB.AddTable<Message>(0, Db.Message);
			clientDB.AddTable<User>(1, Db.User);
		}

		protected override Reducer ToReducer(uint reducerIdx, TransactionUpdate update)
		{
			var encodedArgs = update.ReducerCall.Args;
			return reducerIdx switch {
				0 => new Reducer.IdentityConnected(BSATNHelpers.Decode<IdentityConnected>(encodedArgs)),
				1 => new Reducer.IdentityDisconnected(BSATNHelpers.Decode<IdentityDisconnected>(encodedArgs)),
				2 => new Reducer.Init(BSATNHelpers.Decode<Init>(encodedArgs)),
				3 => new Reducer.SendMessage(BSATNHelpers.Decode<SendMessage>(encodedArgs)),
				4 => new Reducer.SetName(BSATNHelpers.Decode<SetName>(encodedArgs)),
				4294967295 => new Reducer.StdbNone(default),
				var reducer => throw new ArgumentOutOfRangeException("Reducer", $"Unknown reducer {reducer}")
			};
		}

		protected override IEventContext ToEventContext(Event<Reducer> reducerEvent) =>
		new EventContext(this, reducerEvent);

		protected override bool Dispatch(IEventContext context, Reducer reducer)
		{
			var eventContext = (EventContext)context;
			return reducer switch {
				Reducer.IdentityConnected(var args) => Reducers.InvokeIdentityConnected(eventContext, args),
				Reducer.IdentityDisconnected(var args) => Reducers.InvokeIdentityDisconnected(eventContext, args),
				Reducer.Init(var args) => Reducers.InvokeInit(eventContext, args),
				Reducer.SendMessage(var args) => Reducers.InvokeSendMessage(eventContext, args),
				Reducer.SetName(var args) => Reducers.InvokeSetName(eventContext, args),
				Reducer.StdbNone => true,
				_ => throw new ArgumentOutOfRangeException("Reducer", $"Unknown reducer {reducer}")
			};
		}

		public SubscriptionBuilder<EventContext> SubscriptionBuilder() => new(this);
	}
}
