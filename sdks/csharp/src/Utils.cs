using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;

namespace System.Runtime.CompilerServices
{
    static class IsExternalInit {}
}

namespace SpacetimeDB
{
    // Note: this utility struct is used by an autogenerated C# code so it needs to be public.
    public readonly struct ByteArrayComparer : IEqualityComparer<byte[]>, IEqualityComparer<ReadOnlyMemory<byte>>
    {
        public static readonly ByteArrayComparer Instance = new();

        public bool Equals(ReadOnlySpan<byte> left, ReadOnlySpan<byte> right) => left.SequenceEqual(right);

        public bool Equals(ReadOnlyMemory<byte> left, ReadOnlyMemory<byte> right) => Equals(left.Span, right.Span);

        public bool Equals(byte[] left, byte[] right) => Equals(left.AsSpan(), right.AsSpan());

        public int GetHashCode(ReadOnlySpan<byte> span)
        {
            int hash = 17;
            foreach (var b in span)
            {
                hash = hash * 31 + b;
            }
            return hash;
        }

        public int GetHashCode(ReadOnlyMemory<byte> memory) => GetHashCode(memory.Span);

        public int GetHashCode(byte[] bytes) => GetHashCode(bytes.AsSpan());

        // Same as `Convert.ToHexString`, but that method is not available in .NET Standard
        // which we need to target for Unity support.
        public static string ToHexString(byte[] bytes) => BitConverter.ToString(bytes).Replace("-", "");
    }
}
