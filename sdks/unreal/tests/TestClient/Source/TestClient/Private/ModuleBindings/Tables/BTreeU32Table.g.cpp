// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.2 (commit 263b33e20d9304f44bf4d598dde892211c5c89e8).

#include "ModuleBindings/Tables/BTreeU32Table.g.h"
#include "DBCache/UniqueIndex.h"
#include "DBCache/BTreeUniqueIndex.h"
#include "DBCache/ClientCache.h"
#include "DBCache/TableCache.h"

void UBTreeU32Table::PostInitialize()
{
    /** Client cache init and setting up indexes*/
    Data = MakeShared<UClientCache<FBTreeU32Type>>();

    TSharedPtr<FTableCache<FBTreeU32Type>> BTreeU32Table = Data->GetOrAdd(TableName);

    // Register a new multi-key B-Tree index named "n" on the BTreeU32Table.
    BTreeU32Table->AddMultiKeyBTreeIndex<TTuple<uint32>>(
        TEXT("n"),
        [](const FBTreeU32Type& Row)
        {
            // This tuple is stored in the B-Tree index for fast composite key lookups.
            return MakeTuple(Row.N);
        }
    );

    N = NewObject<UBTreeU32NIndex>(this);
    N->SetCache(BTreeU32Table);

    /***/
}

FTableAppliedDiff<FBTreeU32Type> UBTreeU32Table::Update(TArray<FWithBsatn<FBTreeU32Type>> InsertsRef, TArray<FWithBsatn<FBTreeU32Type>> DeletesRef)
{
    FTableAppliedDiff<FBTreeU32Type> Diff = BaseUpdate<FBTreeU32Type>(InsertsRef, DeletesRef, Data, TableName);

    return Diff;
}

int32 UBTreeU32Table::Count() const
{
    return GetRowCountFromTable<FBTreeU32Type>(Data, TableName);
}

TArray<FBTreeU32Type> UBTreeU32Table::Iter() const
{
    return GetAllRowsFromTable<FBTreeU32Type>(Data, TableName);
}
