// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.2 (commit aeeb35f0bbce28430aeeb22691976813dd469e1e).

#include "ModuleBindings/Tables/UniqueU256Table.g.h"
#include "DBCache/UniqueIndex.h"
#include "DBCache/BTreeUniqueIndex.h"
#include "DBCache/ClientCache.h"
#include "DBCache/TableCache.h"

void UUniqueU256Table::PostInitialize()
{
    /** Client cache init and setting up indexes*/
    Data = MakeShared<UClientCache<FUniqueU256Type>>();

    TSharedPtr<FTableCache<FUniqueU256Type>> UniqueU256Table = Data->GetOrAdd(TableName);
    UniqueU256Table->AddUniqueConstraint<FSpacetimeDBUInt256>("n", [](const FUniqueU256Type& Row) -> const FSpacetimeDBUInt256& {
        return Row.N; });

    N = NewObject<UUniqueU256NUniqueIndex>(this);
    N->SetCache(UniqueU256Table);

    /***/
}

FTableAppliedDiff<FUniqueU256Type> UUniqueU256Table::Update(TArray<FWithBsatn<FUniqueU256Type>> InsertsRef, TArray<FWithBsatn<FUniqueU256Type>> DeletesRef)
{
    FTableAppliedDiff<FUniqueU256Type> Diff = BaseUpdate<FUniqueU256Type>(InsertsRef, DeletesRef, Data, TableName);

    return Diff;
}

int32 UUniqueU256Table::Count() const
{
    return GetRowCountFromTable<FUniqueU256Type>(Data, TableName);
}

TArray<FUniqueU256Type> UUniqueU256Table::Iter() const
{
    return GetAllRowsFromTable<FUniqueU256Type>(Data, TableName);
}
