// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.2 (commit aeeb35f0bbce28430aeeb22691976813dd469e1e).

#include "ModuleBindings/Tables/UniqueU128Table.g.h"
#include "DBCache/UniqueIndex.h"
#include "DBCache/BTreeUniqueIndex.h"
#include "DBCache/ClientCache.h"
#include "DBCache/TableCache.h"

void UUniqueU128Table::PostInitialize()
{
    /** Client cache init and setting up indexes*/
    Data = MakeShared<UClientCache<FUniqueU128Type>>();

    TSharedPtr<FTableCache<FUniqueU128Type>> UniqueU128Table = Data->GetOrAdd(TableName);
    UniqueU128Table->AddUniqueConstraint<FSpacetimeDBUInt128>("n", [](const FUniqueU128Type& Row) -> const FSpacetimeDBUInt128& {
        return Row.N; });

    N = NewObject<UUniqueU128NUniqueIndex>(this);
    N->SetCache(UniqueU128Table);

    /***/
}

FTableAppliedDiff<FUniqueU128Type> UUniqueU128Table::Update(TArray<FWithBsatn<FUniqueU128Type>> InsertsRef, TArray<FWithBsatn<FUniqueU128Type>> DeletesRef)
{
    FTableAppliedDiff<FUniqueU128Type> Diff = BaseUpdate<FUniqueU128Type>(InsertsRef, DeletesRef, Data, TableName);

    return Diff;
}

int32 UUniqueU128Table::Count() const
{
    return GetRowCountFromTable<FUniqueU128Type>(Data, TableName);
}

TArray<FUniqueU128Type> UUniqueU128Table::Iter() const
{
    return GetAllRowsFromTable<FUniqueU128Type>(Data, TableName);
}
