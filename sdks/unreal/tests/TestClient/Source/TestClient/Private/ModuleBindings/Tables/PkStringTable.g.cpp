// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.2 (commit aeeb35f0bbce28430aeeb22691976813dd469e1e).

#include "ModuleBindings/Tables/PkStringTable.g.h"
#include "DBCache/UniqueIndex.h"
#include "DBCache/BTreeUniqueIndex.h"
#include "DBCache/ClientCache.h"
#include "DBCache/TableCache.h"

void UPkStringTable::PostInitialize()
{
    /** Client cache init and setting up indexes*/
    Data = MakeShared<UClientCache<FPkStringType>>();

    TSharedPtr<FTableCache<FPkStringType>> PkStringTable = Data->GetOrAdd(TableName);
    PkStringTable->AddUniqueConstraint<FString>("s", [](const FPkStringType& Row) -> const FString& {
        return Row.S; });

    S = NewObject<UPkStringSUniqueIndex>(this);
    S->SetCache(PkStringTable);

    /***/
}

FTableAppliedDiff<FPkStringType> UPkStringTable::Update(TArray<FWithBsatn<FPkStringType>> InsertsRef, TArray<FWithBsatn<FPkStringType>> DeletesRef)
{
    FTableAppliedDiff<FPkStringType> Diff = BaseUpdate<FPkStringType>(InsertsRef, DeletesRef, Data, TableName);

    Diff.DeriveUpdatesByPrimaryKey<FString>(
        [](const FPkStringType& Row) 
        {
            return Row.S; 
        }
    );

    return Diff;
}

int32 UPkStringTable::Count() const
{
    return GetRowCountFromTable<FPkStringType>(Data, TableName);
}

TArray<FPkStringType> UPkStringTable::Iter() const
{
    return GetAllRowsFromTable<FPkStringType>(Data, TableName);
}
